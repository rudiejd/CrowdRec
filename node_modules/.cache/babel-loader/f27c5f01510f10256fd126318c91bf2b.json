{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Button}from'react-bootstrap';import{connect}from'react-redux';// I got most of this authorization method from StackOverflow. I used redux to share the token across components. \nexport var authEndpoint='https://accounts.spotify.com/authorize';var SpotifyAuth=/*#__PURE__*/function(_Component){_inherits(SpotifyAuth,_Component);var _super=_createSuper(SpotifyAuth);function SpotifyAuth(props){var _this;_classCallCheck(this,SpotifyAuth);_this=_super.call(this,props);_this.state={isAuthenticatedWithSpotify:false};_this.state.handleRedirect=_this.handleRedirect.bind(_assertThisInitialized(_this));return _this;}/**\r\n   * Runs after component mounts,  decodes the access token if applicable\r\n   */_createClass(SpotifyAuth,[{key:\"componentDidMount\",value:function componentDidMount(){var hash=window.location.hash.substring(1).split('&').reduce(function(initial,item){if(item){var parts=item.split('=');initial[parts[0]]=decodeURIComponent(parts[1]);}return initial;},{});var access_token=hash.access_token;this.props.change({'name':'token','value':access_token});}/**\r\n * On click of button, redirect to the spotify Implicit-Grant flow portal with our presets. Auth modes used:\r\n *  user-read-private\r\n *  playlist-modify-public\r\n *  playlist-modify-private\r\n * @param {*} event Change event for button \r\n */},{key:\"handleRedirect\",value:function handleRedirect(event){event.preventDefault();var url='https://accounts.spotify.com/authorize'+'?response_type=token'+'&client_id=3f31f6d13b974219a7093698a47d76f9'+'&scope='+encodeURIComponent('user-read-private%20playlist-modify-public%20playlist-modify-private')+'&redirect_uri='+encodeURIComponent('http://localhost:3000');window.location=url;}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(Button,{className:\"sp_button\",onClick:function onClick(event){return _this2.handleRedirect(event);}},\"Link spotify to get started\");}}]);return SpotifyAuth;}(Component);var mapStateToProps=function mapStateToProps(state){return{vars:state.vars};};// mapping the dispatches from our reducer to box props \nvar mapDispatchToProps=function mapDispatchToProps(dispatch){return{change:function change(vName){return dispatch({type:'CHANGE',name:vName});}};};export default connect(mapStateToProps,mapDispatchToProps)(SpotifyAuth);","map":{"version":3,"sources":["C:/Users/rudiejd/Documents/crowdrec/app/src/components/SpotifyAuth.js"],"names":["React","Component","Button","connect","authEndpoint","SpotifyAuth","props","state","isAuthenticatedWithSpotify","handleRedirect","bind","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","access_token","change","event","preventDefault","url","encodeURIComponent","mapStateToProps","vars","mapDispatchToProps","dispatch","vName","type","name"],"mappings":"w0BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAAQC,MAAR,KAAqB,iBAArB,CACA,OAAQC,OAAR,KAAsB,aAAtB,CAEA;AAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,wCAArB,C,GACDC,CAAAA,W,0GACJ,qBAAYC,KAAZ,CAAmB,6CACjB,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACXC,0BAA0B,CAAE,KADjB,CAAb,CAGA,MAAKD,KAAL,CAAWE,cAAX,CAA4B,MAAKA,cAAL,CAAoBC,IAApB,+BAA5B,CALiB,aAMlB,CACD;;0FAGoB,CAClB,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CACZG,SADY,CACF,CADE,EAEZC,KAFY,CAEN,GAFM,EAGZC,MAHY,CAGL,SAAUC,OAAV,CAAmBC,IAAnB,CAAyB,CAC/B,GAAIA,IAAJ,CAAU,CACR,GAAIC,CAAAA,KAAK,CAAGD,IAAI,CAACH,KAAL,CAAW,GAAX,CAAZ,CACAE,OAAO,CAACE,KAAK,CAAC,CAAD,CAAN,CAAP,CAAoBC,kBAAkB,CAACD,KAAK,CAAC,CAAD,CAAN,CAAtC,CACD,CACD,MAAOF,CAAAA,OAAP,CACD,CATY,CASV,EATU,CAAb,CAWA,GAAMI,CAAAA,YAAY,CAAGV,IAAI,CAACU,YAA1B,CACA,KAAKf,KAAL,CAAWgB,MAAX,CAAkB,CAAC,OAAQ,OAAT,CAAkB,QAASD,YAA3B,CAAlB,EAGD,CACH;;;;;;yDAOiBE,K,CAAO,CACpBA,KAAK,CAACC,cAAN,GAEA,GAAIC,CAAAA,GAAG,CACL,yCACA,sBADA,CAEA,6CAFA,CAGA,SAHA,CAIAC,kBAAkB,CAAC,sEAAD,CAJlB,CAKA,gBALA,CAMAA,kBAAkB,CAAC,uBAAD,CAPpB,CAQEd,MAAM,CAACC,QAAP,CAAkBY,GAAlB,CACH,C,uCAEQ,iBACP,mBAEI,oBAAC,MAAD,EAAQ,SAAS,CAAC,WAAlB,CAA8B,OAAO,CAAE,iBAACF,KAAD,QAAW,CAAA,MAAI,CAACd,cAAL,CAAoBc,KAApB,CAAX,EAAvC,gCAFJ,CAMD,C,yBAxDuBtB,S,EA2D1B,GAAM0B,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACpB,KAAD,CAAW,CAC/B,MAAO,CACLqB,IAAI,CAACrB,KAAK,CAACqB,IADN,CAAP,CAGD,CAJH,CAME;AACA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAc,CACvC,MAAO,CACLR,MAAM,CAAE,gBAACS,KAAD,QAAWD,CAAAA,QAAQ,CAAE,CAACE,IAAI,CAAE,QAAP,CAAiBC,IAAI,CAAEF,KAAvB,CAAF,CAAnB,EADH,CAAP,CAKD,CAND,CAQF,cAAe5B,CAAAA,OAAO,CAACwB,eAAD,CAAkBE,kBAAlB,CAAP,CAA6CxB,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\n\r\n// I got most of this authorization method from StackOverflow. I used redux to share the token across components. \r\n\r\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\r\nclass SpotifyAuth extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isAuthenticatedWithSpotify: false\r\n    };\r\n    this.state.handleRedirect = this.handleRedirect.bind(this);\r\n  }\r\n  /**\r\n   * Runs after component mounts,  decodes the access token if applicable\r\n   */\r\n  componentDidMount() {\r\n    const hash = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce(function (initial, item) {\r\n      if (item) {\r\n        var parts = item.split('=');\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n      }\r\n      return initial;\r\n    }, {});\r\n\r\n    const access_token = hash.access_token;\r\n    this.props.change({'name': 'token', 'value': access_token})\r\n    \r\n    \r\n  }\r\n/**\r\n * On click of button, redirect to the spotify Implicit-Grant flow portal with our presets. Auth modes used:\r\n *  user-read-private\r\n *  playlist-modify-public\r\n *  playlist-modify-private\r\n * @param {*} event Change event for button \r\n */\r\n  handleRedirect(event) {\r\n    event.preventDefault();\r\n\r\n    let url =\r\n      'https://accounts.spotify.com/authorize' +    \r\n      '?response_type=token' +\r\n      '&client_id=3f31f6d13b974219a7093698a47d76f9' +\r\n      '&scope=' +\r\n      encodeURIComponent('user-read-private%20playlist-modify-public%20playlist-modify-private') +\r\n      '&redirect_uri=' +\r\n      encodeURIComponent('http://localhost:3000');\r\n      window.location = url;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n        <Button className=\"sp_button\" onClick={(event) => this.handleRedirect(event)} >\r\n          Link spotify to get started\r\n        </Button>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      vars:state.vars\r\n    }\r\n  };\r\n  \r\n  // mapping the dispatches from our reducer to box props \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      change: (vName) => dispatch( {type: 'CHANGE', name: vName} ),\r\n  \r\n    }\r\n  \r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SpotifyAuth);"]},"metadata":{},"sourceType":"module"}