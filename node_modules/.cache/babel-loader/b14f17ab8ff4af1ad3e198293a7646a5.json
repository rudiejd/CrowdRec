{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\src\\\\components\\\\SpotifyForm.js\";\nimport { withRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Card, Form, Button } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotify = new SpotifyWebApi();\n\nclass SpotifyForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    const Styles = styled.div``;\n  }\n  /**\r\n   * Handle change in the artist value\r\n   * @param {Object} event Event incurred by change \r\n   */\n\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.props.change({\n      name: name,\n      value: value\n    });\n  }\n  /**\r\n   * Gets recommendations for a specific artist\r\n   * @param {string} name The name of the artist\r\n   */\n\n\n  getRecs(name) {\n    let map = new Map();\n    console.log(name);\n    spotify.searchPlaylists(name).then(res => res.playlists.total).then(total => spotify.searchPlaylists(name, {\n      offset: Math.floor(Math.random() * (total / 20))\n    }).then(res => res.playlists.items.forEach(i => {\n      console.log(i);\n\n      if (map.has(i)) {\n        map.set(i, map.get(i) + 1);\n      } else {\n        map.set(i, 1);\n      }\n    })));\n  }\n  /**\r\n   *  Handles submission of Artist form\r\n   * @param {Object} e Submission event\r\n   * TODO: Error handling\r\n   */\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    spotify.setAccessToken(this.props.vars.token);\n    spotify.searchArtists(this.props.vars.artist).catch(er => console.log(er)).then(res => res.artists.items[0].name).then(name => this.getRecs(name));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"Enter artist's name for recommendations\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }, \"Artist\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Artist\",\n      name: \"artist\",\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"submit\",\n      className: \"bg-primary text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    })))));\n  }\n\n} // mapping our redux state to box props\n\n\nconst mapStateToProps = state => {\n  return {\n    vars: state.vars\n  };\n}; // mapping the dispatches from our reducer to box props \n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    change: vName => dispatch({\n      type: 'CHANGE',\n      name: vName\n    })\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));","map":{"version":3,"sources":["C:/Users/rudiejd/Documents/crowdrec/app/src/components/SpotifyForm.js"],"names":["withRouter","React","Component","Card","Form","Button","styled","connect","SpotifyWebApi","spotify","SpotifyForm","constructor","props","handleChange","bind","handleSubmit","Styles","div","event","target","value","name","change","getRecs","map","Map","console","log","searchPlaylists","then","res","playlists","total","offset","Math","floor","random","items","forEach","i","has","set","get","e","preventDefault","setAccessToken","vars","token","searchArtists","artist","catch","er","artists","render","mapStateToProps","state","mapDispatchToProps","dispatch","vName","type"],"mappings":"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","sourcesContent":["import { withRouter } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { Card, Form, Button} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport {connect} from 'react-redux';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nvar spotify = new SpotifyWebApi();\r\n\r\n\r\nclass SpotifyForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        const Styles = styled.div``;        \r\n    }\r\n    /**\r\n     * Handle change in the artist value\r\n     * @param {Object} event Event incurred by change \r\n     */\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.props.change({name: name, value: value});\r\n    }\r\n    /**\r\n     * Gets recommendations for a specific artist\r\n     * @param {string} name The name of the artist\r\n     */\r\n    getRecs(name) {\r\n        let map = new Map();\r\n        console.log(name);\r\n        spotify.searchPlaylists(name)\r\n        .then(res => res.playlists.total)\r\n        .then(total => spotify.searchPlaylists(name, {offset: Math.floor(Math.random() * (total/20))}).then(\r\n            res => res.playlists.items\r\n                    .forEach(i => {\r\n                        console.log(i);\r\n                        if (map.has(i)) {\r\n                            map.set(i, map.get(i)+1)\r\n                        } else {\r\n                            map.set(i, 1);\r\n                        }\r\n                    }  )\r\n\r\n        ));\r\n        \r\n    }\r\n\r\n    /**\r\n     *  Handles submission of Artist form\r\n     * @param {Object} e Submission event\r\n     * TODO: Error handling\r\n     */\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        spotify.setAccessToken(this.props.vars.token);\r\n        spotify.searchArtists(this.props.vars.artist).catch(er => console.log(er))\r\n            .then(res => res.artists.items[0].name)\r\n            .then(name => this.getRecs(name));\r\n        \r\n    }\r\n\r\n    \r\n\r\n\r\n    render() { return (\r\n        <Card>\r\n            <Card.Body>\r\n                <Card.Title>Enter artist's name for recommendations</Card.Title>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>Artist</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Artist\"  name=\"artist\" onChange={this.handleChange} required></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control type=\"submit\" className=\"bg-primary text-light\">\r\n\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n    }\r\n}\r\n\r\n// mapping our redux state to box props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      vars:state.vars\r\n    }\r\n  };\r\n  \r\n  // mapping the dispatches from our reducer to box props \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      change: (vName) => dispatch( {type: 'CHANGE', name: vName} ),\r\n  \r\n    }\r\n  \r\n  }\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));"]},"metadata":{},"sourceType":"module"}