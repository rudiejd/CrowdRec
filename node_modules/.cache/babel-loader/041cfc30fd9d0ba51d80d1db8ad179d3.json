{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\src\\\\components\\\\SpotifyForm.js\";\nimport { withRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Card, Form, Button } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotify = new SpotifyWebApi();\n\nclass SpotifyForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    const Styles = styled.div``;\n  }\n  /**\r\n   * Handle change in the artist value\r\n   * @param {Object} event Event incurred by change \r\n   */\n\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.props.change({\n      name: name,\n      value: value\n    });\n    console.log(this.props.vars);\n  }\n  /**\r\n   * Gets recommendations for a specific artist and outputs recOutput value in redux store\r\n   * @param {string} name The name of the artist\r\n   * TODO: catch errors again lol\r\n   * /\r\n  **/\n\n\n  getRecs(name) {\n    let map = new Map();\n    let output = {};\n    console.log(name);\n\n    for (let i = 0; i < 4; i++) {\n      spotify.searchPlaylists(name).then(res => res.playlists.total).then(total => spotify.searchPlaylists(name, {\n        offset: Math.floor(Math.random() * (total / 50))\n      }).then(res => {\n        res.playlists.items.forEach(i => {\n          spotify.getPlaylistTracks(i.id).then(pt => {\n            if (pt == undefined) {\n              return Promise.reject();\n            }\n\n            pt.items.forEach(track => {\n              if (track.track != null && track.track.artists[0].name !== name) {\n                if (map.has(track.track.artists[0].name)) {\n                  map.set(track.track.artists[0].name, map.get(track.track.artists[0].name) + 1);\n                } else {\n                  map.set(track.track.artists[0].name, 1);\n                }\n              }\n            });\n          });\n        });\n        return map;\n      })).then(map => {\n        for (let [k, v] of map.entries()) {\n          if (v > 5) {\n            output[k] = v;\n          }\n        }\n\n        return output;\n      }).then(output => this.props.change({\n        name: \"recOutput\",\n        value: output\n      })).then(this.forceUpdate()).catch(err => console.log(err));\n    }\n  }\n  /**\r\n   *  Handles submission of Artist form\r\n   * @param {Object} e Submission event\r\n   * TODO: Error handling\r\n   */\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    spotify.setAccessToken(this.props.vars.token);\n    spotify.searchArtists(this.props.vars.artist).catch(er => console.log(er)).then(res => res.artists.items[0].name).then(name => this.getRecs(name));\n  }\n\n  render() {\n    if (this.props.vars.recOutput !== undefined) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }\n      }, \"Enter artist's name for recommendations\"), /*#__PURE__*/React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 33\n        }\n      }, \"Artist\"), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        placeholder: \"Artist\",\n        name: \"artist\",\n        onChange: this.handleChange,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"submit\",\n        className: \"bg-primary text-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 33\n        }\n      }))))), Object.keys(this.props.vars.recOutput).map(band => /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 69\n        }\n      }, band, \": \", this.props.vars.recOutput[band], \" \")));\n    } else return /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, \"Enter artist's name for recommendations\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, \"Artist\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Artist\",\n      name: \"artist\",\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"submit\",\n      className: \"bg-primary text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    })))));\n  }\n\n} // mapping our redux state to box props\n\n\nconst mapStateToProps = state => {\n  return {\n    vars: state.vars\n  };\n}; // mapping the dispatches from our reducer to box props \n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    change: vName => dispatch({\n      type: 'CHANGE',\n      name: vName\n    })\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));","map":{"version":3,"sources":["C:/Users/rudiejd/Documents/crowdrec/app/src/components/SpotifyForm.js"],"names":["withRouter","React","Component","Card","Form","Button","styled","connect","SpotifyWebApi","spotify","SpotifyForm","constructor","props","handleChange","bind","handleSubmit","Styles","div","event","target","value","name","change","console","log","vars","getRecs","map","Map","output","i","searchPlaylists","then","res","playlists","total","offset","Math","floor","random","items","forEach","getPlaylistTracks","id","pt","undefined","Promise","reject","track","artists","has","set","get","k","v","entries","forceUpdate","catch","err","e","preventDefault","setAccessToken","token","searchArtists","artist","er","render","recOutput","Object","keys","band","mapStateToProps","state","mapDispatchToProps","dispatch","vName","type"],"mappings":"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","sourcesContent":["import { withRouter } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { Card, Form, Button} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport {connect} from 'react-redux';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nvar spotify = new SpotifyWebApi();\r\n\r\n\r\nclass SpotifyForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        const Styles = styled.div``;        \r\n    }\r\n    /**\r\n     * Handle change in the artist value\r\n     * @param {Object} event Event incurred by change \r\n     */\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.props.change({name: name, value: value});\r\n        console.log(this.props.vars);\r\n    }\r\n    /**\r\n     * Gets recommendations for a specific artist and outputs recOutput value in redux store\r\n     * @param {string} name The name of the artist\r\n     * TODO: catch errors again lol\r\n     * /\r\n    **/\r\n    getRecs(name) {\r\n        let map = new Map();\r\n        let output = {};\r\n        console.log(name);\r\n        for (let i = 0; i < 4; i++) {\r\n            spotify.searchPlaylists(name)\r\n            .then(res => res.playlists.total)\r\n            .then(total => spotify.searchPlaylists(name, {offset: Math.floor(Math.random() * (total/50))}).then(\r\n                res => {res.playlists.items\r\n                        .forEach(i => {\r\n                            spotify.getPlaylistTracks(i.id).then(\r\n                                pt => {\r\n                                    if (pt == undefined) {\r\n                                        return Promise.reject();\r\n                                    }\r\n                                    pt.items.forEach(\r\n                                        track => {\r\n                                            if (track.track != null && track.track.artists[0].name !== name) {\r\n                                                if (map.has(track.track.artists[0].name)) {\r\n                                                    map.set(track.track.artists[0].name, map.get(track.track.artists[0].name) + 1);\r\n                                                } else {\r\n                                                    map.set(track.track.artists[0].name, 1);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                )\r\n                                })\r\n                        }  )\r\n                return map;\r\n                }\r\n            )).then(map => {\r\n                for (let [k, v] of map.entries()) {\r\n                    if (v > 5) {\r\n                        output[k] = v;\r\n                    }\r\n                }\r\n                return output;\r\n            })\r\n            .then(output => this.props.change({name: \"recOutput\", value: output})).then(this.forceUpdate())\r\n            .catch(err => console.log(err))\r\n            \r\n        }\r\n\r\n\r\n        \r\n    }\r\n\r\n    /**\r\n     *  Handles submission of Artist form\r\n     * @param {Object} e Submission event\r\n     * TODO: Error handling\r\n     */\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        spotify.setAccessToken(this.props.vars.token);\r\n        spotify.searchArtists(this.props.vars.artist).catch(er => console.log(er))\r\n            .then(res => res.artists.items[0].name)\r\n            .then(name => this.getRecs(name));\r\n        \r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        \r\n        if (this.props.vars.recOutput !== undefined ) {\r\n            return (\r\n                <React.Fragment>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>Enter artist's name for recommendations</Card.Title>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Group>\r\n                                <Form.Label>Artist</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Artist\"  name=\"artist\" onChange={this.handleChange} required></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"submit\" className=\"bg-primary text-light\">\r\n        \r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Card.Body>\r\n                </Card>\r\n                {Object.keys(this.props.vars.recOutput).map(band => <p>{band}: {this.props.vars.recOutput[band]} </p>)}\r\n                </React.Fragment>\r\n                \r\n            )\r\n        }\r\n        else return (\r\n        <Card>\r\n            <Card.Body>\r\n                <Card.Title>Enter artist's name for recommendations</Card.Title>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>Artist</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Artist\"  name=\"artist\" onChange={this.handleChange} required></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Control type=\"submit\" className=\"bg-primary text-light\">\r\n\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n    }\r\n}\r\n\r\n// mapping our redux state to box props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      vars:state.vars\r\n    }\r\n  };\r\n  \r\n  // mapping the dispatches from our reducer to box props \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      change: (vName) => dispatch( {type: 'CHANGE', name: vName} ),\r\n  \r\n    }\r\n  \r\n  }\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));"]},"metadata":{},"sourceType":"module"}