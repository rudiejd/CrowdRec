{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\src\\\\components\\\\SpotifyForm.js\";\nimport { withRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Alert, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotify = new SpotifyWebApi();\n\nclass SpotifyForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      resultReceived: false,\n      recOutput: {},\n      errorStatus: undefined\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.processResults = this.processResults.bind(this);\n    this.getRecs = this.getRecs.bind(this);\n    this.createPlaylist = this.createPlaylist.bind(this);\n    this.countTracks = this.countTracks.bind(this);\n    this.getRandomTrack = this.getRandomTrack.bind(this);\n  }\n  /**\r\n   * Handle change in the artist value\r\n   * @param {Object} event Event incurred by change \r\n   */\n\n\n  handleChange(event) {\n    this.setState({\n      resultReceived: false,\n      recOutput: undefined\n    });\n    console.log(this.state);\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n    this.render();\n  }\n  /**\r\n   * Handle HTTP errors encountered by updating the state with an error message\r\n   * @param {Object} err \r\n   */\n\n\n  async handleError(err) {\n    switch (err.status) {\n      case 401:\n        await this.setState({\n          errorStatus: \"You don't seem to be authorized. Try clicking the button above to authorize with Spotify and try again.\",\n          resultReceived: false\n        });\n        break;\n\n      case 429:\n        this.setState({\n          errorStatus: \"Looks like we're making too many requests to Spotify right now. Wait a little bit and try that again.\"\n        });\n        break;\n\n      case 501:\n        this.setState({\n          errorStatus: \"Spotify's servers are fried! Check out their status, then try again when they're back up\"\n        });\n        break;\n\n      default:\n        this.setState({\n          errorStatus: \"An unknown error occurred. Maybe try again? Your guess is as good as mine\"\n        });\n    }\n  }\n  /**\r\n   * Checks whether a playlist contains is valid. Criteria for validity are:\r\n   *  - playlist attributes are well-defined (no null properties)\r\n   *  - playlist must contain the artist for which user is searching\r\n   * @param {string} id ID of playlist \r\n   * @param {*} artist Name of artist\r\n   * @returns {Promise<boolean>} true if playlist is valid, false otherwise \r\n   */\n\n\n  async isPlaylistValid(id, artist) {\n    return spotify.getPlaylistTracks(id).then(pt => {\n      if (pt === undefined) {\n        return;\n      }\n\n      for (let track of pt.items) {\n        if (track === undefined || track.track === undefined) {\n          continue;\n        } else if (track.track.artists[0].name === artist) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n  }\n  /**\r\n   * Asynchronously counts tracks by a given artist in a given playlist\r\n   * @param {string} id ID of the playlist\r\n   * @param {string} name Name of the artist\r\n   * @param {object} output Reference to output object which should be modified\r\n   * @returns {Promise}\r\n   */\n\n\n  async countTracks(id, name, output) {\n    debugger;\n    const MAX_SONGS = 200;\n    return spotify.getPlaylistTracks(id).then(pt => {\n      let curSongs = 0;\n\n      for (let track of pt.items) {\n        if (curSongs > MAX_SONGS) break;\n\n        if (track.track != null && track.track.artists[0].name !== name && track.track.artists[0].name !== \"\") {\n          if (track.track.artists[0].name in output) {\n            output[track.track.artists[0].name]++;\n          } else {\n            output[track.track.artists[0].name] = 1;\n          }\n        }\n\n        curSongs++;\n      }\n    }).catch(err => this.handleError(err));\n  }\n  /**\r\n   * Gets recommendations for a specific artist and outputs recOutput value in state\r\n   * @param {string} name The name of the artist\r\n   * @returns {Promise}\r\n   * /\r\n  **/\n\n\n  async getRecs(name) {\n    var output = {};\n    let promises = [];\n    await spotify.searchPlaylists(name, {\n      limit: 1\n    }).then(async (searchTotal) => await spotify.searchPlaylists(name, {\n      limit: 50,\n      offset: Math.floor(Math.random() * (searchTotal.playlists.total / 50))\n    }).then(res => {\n      for (let i of res.playlists.items) {\n        promises.push(this.isPlaylistValid(i.id, name).then(valid => valid ? this.countTracks(i.id, name, output) : null));\n      }\n    })).catch(err => this.handleError(err));\n    return Promise.all(promises).then(() => this.setState({\n      recOutput: this.processResults(output),\n      artist: name\n    }));\n  }\n  /**\r\n   * Processesresults from our query to spotify, removing entries beyond a certain threshhold then sorting the object.\r\n   * @returns Results\r\n   */\n\n\n  processResults(input) {\n    let processed = {};\n\n    for (let key in input) {\n      if (input[key] > 10) {\n        processed[key] = input[key];\n      }\n    }\n\n    const sorted = Object.fromEntries(Object.entries(processed).sort(([, a], [, b]) => b - a));\n    return sorted;\n  }\n\n  getRandomTrack(band) {\n    return spotify.searchTracks(band, {\n      limit: 1\n    }).then(searchTotal => spotify.searchTracks(band, {\n      limit: 50,\n      offset: Math.floor(Math.random() * (searchTotal.tracks.total / 50))\n    })).then(tracks => tracks.items[Math.floor(Math.random() * 50)]).catch(err => this.handleError(err));\n  }\n  /**\r\n   * Creates playlist with one random song from each output artist\r\n   */\n\n\n  createPlaylist() {\n    debugger;\n    let promises = [];\n    spotify.getMe().then(me => spotify.createPlaylist(me.id, {\n      name: \"Recommendations Based on \" + this.state.artist,\n      public: false\n    })).then(async playlist => {\n      this.setState({\n        playlistUri: playlist.external_urls[\"spotify\"]\n      });\n      Object.keys(this.state.recOutput).forEach(async artist => {\n        await this.getRandomTrack(artist).then(track => promises.push(spotify.addTracksToPlaylist(track)));\n      });\n    }).catch(err => this.handleError(err));\n    Promise.all(promises).then(() => this.setState({\n      alert: 'Playlist created! Click <a href=' + this.state.playlistUri + '>here </a> to open it up. Enjoy :)'\n    }));\n  }\n  /**\r\n   *  Handles submission of Artist form\r\n   * @param {Object} e Submission event\r\n   * TODO: Error handling\r\n   */\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    spotify.setAccessToken(this.props.vars.token);\n    this.setState({\n      errorStatus: undefined\n    });\n    spotify.searchArtists(this.state.artist).then(async res => await this.getRecs(res.artists.items[0].name)).then(() => {\n      // Only show recommendations if they're non empty\n      if (this.state.errorStatus === undefined) {\n        if (Object.keys(this.state.recOutput).length === 0) {\n          console.log(this.state.recOutput);\n          this.setState({\n            errorStatus: \"Unfortunately, we could not find any recommendations for that artist at this time. Feel free to try another one, or try again since recommendations are randomly generated.\"\n          });\n        } else {\n          this.setState({\n            resultReceived: true\n          });\n        }\n      }\n    }).catch(err => this.handleError(err));\n  }\n  /**\r\n   * Render the component\r\n   * @return JSX\r\n   */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }, this.state.alert !== undefined ? /*#__PURE__*/React.createElement(Alert, {\n      className: \"alert-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 51\n      }\n    }, this.state.alert) : null, this.state.errorStatus !== undefined ? /*#__PURE__*/React.createElement(Alert, {\n      className: \"alert-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 57\n      }\n    }, this.state.errorStatus) : null, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 29\n      }\n    }, \"Enter artist's name for recommendations\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 37\n      }\n    }, \"Artist\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Iron Maiden\",\n      name: \"artist\",\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"submit\",\n      className: \"bg-primary text-light col-8 offset-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"reset\",\n      className: \"bg-primary text-light col-8 offset-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 37\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 21\n      }\n    }, this.state.resultReceived ? /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 51\n      }\n    }, \"Recommended Artists Based on \", this.state.artist) : null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 25\n      }\n    }, this.state.resultReceived ? Object.keys(this.state.recOutput).map(band => /*#__PURE__*/React.createElement(\"li\", {\n      key: band,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 122\n      }\n    }, band, \": \", this.state.recOutput[band])) : null), this.state.resultReceived ? /*#__PURE__*/React.createElement(Button, {\n      className: \"mt-3 col-6 h-50 w-50\",\n      onChange: this.createPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 55\n      }\n    }, \"Create a playlist with songs from these artists\") : null)));\n  }\n\n} // mapping our redux state to box props\n\n\nconst mapStateToProps = state => {\n  return {\n    vars: state.vars\n  };\n}; // mapping the dispatches from our reducer to box props \n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    change: vName => dispatch({\n      type: 'CHANGE',\n      name: vName\n    })\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));","map":{"version":3,"sources":["C:/Users/rudiejd/Documents/crowdrec/app/src/components/SpotifyForm.js"],"names":["withRouter","React","Component","Card","Form","Button","Alert","Row","connect","SpotifyWebApi","spotify","SpotifyForm","constructor","props","state","resultReceived","recOutput","errorStatus","undefined","handleChange","bind","handleSubmit","processResults","getRecs","createPlaylist","countTracks","getRandomTrack","event","setState","console","log","target","value","name","render","handleError","err","status","isPlaylistValid","id","artist","getPlaylistTracks","then","pt","track","items","artists","output","MAX_SONGS","curSongs","catch","promises","searchPlaylists","limit","searchTotal","offset","Math","floor","random","playlists","total","res","i","push","valid","Promise","all","input","processed","key","sorted","Object","fromEntries","entries","sort","a","b","band","searchTracks","tracks","getMe","me","public","playlist","playlistUri","external_urls","keys","forEach","addTracksToPlaylist","alert","e","preventDefault","setAccessToken","vars","token","searchArtists","length","map","mapStateToProps","mapDispatchToProps","dispatch","change","vName","type"],"mappings":"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","sourcesContent":["import { withRouter } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { Card, Form, Button, Alert, Row} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nvar spotify = new SpotifyWebApi();\r\n\r\n\r\nclass SpotifyForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {resultReceived: false, recOutput: {}, errorStatus: undefined} ;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.processResults = this.processResults.bind(this);\r\n        this.getRecs = this.getRecs.bind(this);\r\n        this.createPlaylist = this.createPlaylist.bind(this);\r\n        this.countTracks = this.countTracks.bind(this);\r\n        this.getRandomTrack = this.getRandomTrack.bind(this);\r\n    }\r\n    \r\n    /**\r\n     * Handle change in the artist value\r\n     * @param {Object} event Event incurred by change \r\n     */\r\n    handleChange(event) {\r\n        this.setState({resultReceived: false, recOutput: undefined});\r\n        console.log(this.state);\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({[name]: value});\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Handle HTTP errors encountered by updating the state with an error message\r\n     * @param {Object} err \r\n     */\r\n    async handleError(err) {\r\n        \r\n        switch (err.status) {\r\n            case 401:\r\n                await this.setState({errorStatus: \"You don't seem to be authorized. Try clicking the button above to authorize with Spotify and try again.\", resultReceived: false});\r\n                break;\r\n            case 429:\r\n                this.setState({errorStatus: \"Looks like we're making too many requests to Spotify right now. Wait a little bit and try that again.\"})\r\n                break; \r\n            case 501: \r\n                this.setState({errorStatus: \"Spotify's servers are fried! Check out their status, then try again when they're back up\"})\r\n                break;\r\n            default:\r\n                this.setState({errorStatus: \"An unknown error occurred. Maybe try again? Your guess is as good as mine\"})\r\n        }\r\n\r\n\r\n    }\r\n    /**\r\n     * Checks whether a playlist contains is valid. Criteria for validity are:\r\n     *  - playlist attributes are well-defined (no null properties)\r\n     *  - playlist must contain the artist for which user is searching\r\n     * @param {string} id ID of playlist \r\n     * @param {*} artist Name of artist\r\n     * @returns {Promise<boolean>} true if playlist is valid, false otherwise \r\n     */\r\n    async isPlaylistValid(id, artist) {\r\n        return spotify.getPlaylistTracks(id)\r\n        .then (\r\n            (pt) => {\r\n                if (pt === undefined) {\r\n                    return;\r\n                }\r\n                for (let track of pt.items) {\r\n                    if (track === undefined || track.track === undefined) {\r\n                        continue;\r\n                    } else if (track.track.artists[0].name === artist) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    /**\r\n     * Asynchronously counts tracks by a given artist in a given playlist\r\n     * @param {string} id ID of the playlist\r\n     * @param {string} name Name of the artist\r\n     * @param {object} output Reference to output object which should be modified\r\n     * @returns {Promise}\r\n     */\r\n    async countTracks(id, name, output) {\r\n        debugger;\r\n        const MAX_SONGS = 200;\r\n        return spotify.getPlaylistTracks(id).then(\r\n            pt => {\r\n                let curSongs = 0;\r\n                for (let track of pt.items) {\r\n                    if (curSongs > MAX_SONGS) break;\r\n                    if (track.track != null \r\n                        && track.track.artists[0].name !== name\r\n                        && track.track.artists[0].name !== \"\") {\r\n                        if (track.track.artists[0].name in output) {\r\n                            output[track.track.artists[0].name]++;\r\n                        } else {\r\n                            output[track.track.artists[0].name] = 1;\r\n                        }\r\n                    }\r\n                    curSongs++;\r\n                }\r\n\r\n            }).catch(err => this.handleError(err));\r\n\r\n    }\r\n    /**\r\n     * Gets recommendations for a specific artist and outputs recOutput value in state\r\n     * @param {string} name The name of the artist\r\n     * @returns {Promise}\r\n     * /\r\n    **/\r\n   async getRecs(name) {\r\n        var output = {};\r\n        \r\n        let promises = [];\r\n        await spotify.searchPlaylists(name, {limit: 1})\r\n        .then(async (searchTotal) => \r\n            await spotify.searchPlaylists(name, {limit: 50, offset: Math.floor(Math.random() * (searchTotal.playlists.total/50))}).then(\r\n                res => {\r\n                    for (let i of res.playlists.items) {\r\n                            promises.push(this.isPlaylistValid(i.id, name)\r\n                            .then((valid) => valid ? this.countTracks(i.id, name, output) : null)\r\n                            );\r\n\r\n                    }\r\n                } \r\n            )\r\n        ).catch(err => this.handleError(err));\r\n\r\n        return Promise.all(promises).then(() => this.setState({recOutput: this.processResults(output), artist: name}));\r\n    \r\n        \r\n    }\r\n    /**\r\n     * Processesresults from our query to spotify, removing entries beyond a certain threshhold then sorting the object.\r\n     * @returns Results\r\n     */\r\n    processResults(input) {\r\n        let processed = {};\r\n        for (let key in input)   {\r\n            if (input[key] > 10) {\r\n                processed[key] = input[key];\r\n            }\r\n        }\r\n        const sorted = Object.fromEntries(\r\n            Object.entries(processed).sort(([,a],[,b]) => b-a)\r\n        );\r\n        return sorted;\r\n    }\r\n\r\n\r\n    getRandomTrack(band) {\r\n       return spotify.searchTracks(band, {limit: 1})\r\n        .then((searchTotal) =>\r\n            spotify.searchTracks(band, {limit: 50, offset: Math.floor(Math.random() * (searchTotal.tracks.total/50))})\r\n        )\r\n        .then(\r\n            tracks => tracks.items[Math.floor(Math.random() * 50)]\r\n        )\r\n        .catch(err => this.handleError(err));\r\n    }\r\n\r\n    /**\r\n     * Creates playlist with one random song from each output artist\r\n     */\r\n    createPlaylist () {\r\n        debugger;\r\n        let promises = [];\r\n        spotify.getMe()\r\n        .then(me => spotify.createPlaylist(me.id, {name: \"Recommendations Based on \" + this.state.artist, public: false}))\r\n        .then(async (playlist) => {\r\n            this.setState({playlistUri: playlist.external_urls[\"spotify\"]})\r\n            Object.keys(this.state.recOutput).forEach(async (artist) => {\r\n                await this.getRandomTrack(artist)\r\n                .then(track => promises.push(spotify.addTracksToPlaylist(track)));\r\n            })\r\n        })\r\n        .catch(err => this.handleError(err));\r\n\r\n        Promise.all(promises).then(() => this.setState({alert: 'Playlist created! Click <a href='+this.state.playlistUri+'>here </a> to open it up. Enjoy :)'}))\r\n    }\r\n\r\n    /**\r\n     *  Handles submission of Artist form\r\n     * @param {Object} e Submission event\r\n     * TODO: Error handling\r\n     */\r\n    handleSubmit(e) {        \r\n        e.preventDefault();\r\n        spotify.setAccessToken(this.props.vars.token);\r\n        this.setState({errorStatus: undefined})\r\n        spotify.searchArtists(this.state.artist)\r\n        .then(async (res) => await this.getRecs(res.artists.items[0].name))\r\n        .then(() => {\r\n            // Only show recommendations if they're non empty\r\n            if (this.state.errorStatus === undefined) {\r\n                if (Object.keys(this.state.recOutput).length === 0) {\r\n                    console.log(this.state.recOutput)\r\n                    this.setState(\r\n                        {errorStatus: \"Unfortunately, we could not find any recommendations for that artist at this time. Feel free to try another one, or try again since recommendations are randomly generated.\"})\r\n                } else {\r\n                    this.setState({resultReceived: true});\r\n                }\r\n            }\r\n        }) \r\n        .catch(err => this.handleError(err))\r\n        \r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Render the component\r\n     * @return JSX\r\n     */\r\n    render() {\r\n        \r\n            return (\r\n                <React.Fragment>\r\n                {this.state.alert !== undefined ? <Alert className=\"alert-success\">{this.state.alert}</Alert> : null }\r\n                {this.state.errorStatus !== undefined ? <Alert className=\"alert-danger\">{this.state.errorStatus}</Alert> : null }\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>Enter artist's name for recommendations</Card.Title>\r\n                            <Form onSubmit={this.handleSubmit}>\r\n                                <Form.Group>\r\n                                    <Form.Label>Artist</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Iron Maiden\"  name=\"artist\" onChange={this.handleChange} required></Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Control type=\"submit\" className=\"bg-primary text-light col-8 offset-2\">\r\n            \r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Control type=\"reset\" className=\"bg-primary text-light col-8 offset-2\">\r\n            \r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                \r\n                    <div className=\"d-block\">\r\n                    {this.state.resultReceived  ? <h4>Recommended Artists Based on {this.state.artist}</h4> : null }\r\n                    <Row>\r\n                        <ul className=\"col-6\">{this.state.resultReceived ? Object.keys(this.state.recOutput).map(band => <li key={band}>{band}: {this.state.recOutput[band]}</li>) : null }</ul>\r\n                        {this.state.resultReceived  ? <Button className=\"mt-3 col-6 h-50 w-50\" onChange={this.createPlaylist}>Create a playlist with songs from these artists</Button> : null} \r\n                    </Row>\r\n                    </div>\r\n                \r\n                </React.Fragment>\r\n                \r\n                \r\n            )\r\n        \r\n    }\r\n}\r\n\r\n// mapping our redux state to box props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      vars:state.vars\r\n    }\r\n  };\r\n  \r\n  // mapping the dispatches from our reducer to box props \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      change: (vName) => dispatch( {type: 'CHANGE', name: vName} ),\r\n  \r\n    }\r\n  \r\n  }\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));"]},"metadata":{},"sourceType":"module"}