{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\src\\\\components\\\\SpotifyForm.js\";\nimport { withRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Alert } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotify = new SpotifyWebApi();\n\nclass SpotifyForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      resultReceived: false,\n      recOutput: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.processResults = this.processResults.bind(this);\n    this.getRecs = this.getRecs.bind(this);\n    this.createPlaylist = this.createPlaylist.bind(this);\n    this.countTracks = this.countTracks.bind(this);\n    const Styles = styled.div``;\n  }\n  /**\r\n   * Handle change in the artist value\r\n   * @param {Object} event Event incurred by change \r\n   */\n\n\n  handleChange(event) {\n    console.log(this.state);\n    this.setState({\n      resultReceived: false\n    });\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n    this.render();\n  }\n  /**\r\n   * Handle errors by updating the state\r\n   * @param {Object} err \r\n   */\n\n\n  handleError(err) {\n    console.log(err);\n\n    switch (err.status) {\n      case 401:\n        this.setState({\n          errorStatus: \"You don't seem to be authorized. Try authorizing with Spotify and trying again.\"\n        });\n        break;\n\n      case 429:\n        this.setState({\n          errorStatus: \"Looks like we're making too many requests to Spotify right now. Wait a little bit and try that again.\"\n        });\n        break;\n\n      default:\n        this.setState({\n          errorStatus: \"Some error occurred. Please try again.\"\n        });\n    }\n  }\n\n  async countTracks(id, name, output) {\n    const MAX_SONGS = 50;\n    spotify.getPlaylistTracks(id).then(pt => {\n      let curSongs = 0;\n\n      if (pt == undefined) {\n        return;\n      }\n\n      for (let track of pt.items) {\n        if (curSongs > MAX_SONGS) break;\n\n        if (track.track != null && track.track.artists[0].name !== name && track.track.artists[0].name !== \"\") {\n          if (track.track.artists[0].name in output) {\n            output[track.track.artists[0].name]++;\n          } else {\n            output[track.track.artists[0].name] = 1;\n          }\n        }\n\n        curSongs++;\n      }\n    });\n  }\n  /**\r\n   * Gets recommendations for a specific artist and outputs recOutput value in redux store\r\n   * @param {string} name The name of the artist\r\n   * TODO: catch errors again lol\r\n   * /\r\n  **/\n\n\n  getRecs(name) {\n    var output = {};\n    let promises = [];\n    promises.push(spotify.searchPlaylists(name, {\n      limit: 1\n    }).then(searchTotal => {\n      promises.push(spotify.searchPlaylists(name, {\n        limit: 50,\n        offset: Math.floor(Math.random() * (searchTotal.playlists.total / 50))\n      }).then(res => {\n        for (let i of res.playlists.items) {\n          promises.push(this.countTracks(i.id, name, output).then(console.log(output)));\n        }\n      }));\n    }));\n    Promise.all(promises).then(() => window.alert(JSON.stringify(output)));\n  }\n  /**\r\n   * Processesresults from our query to spotify, removing entries beyond a certain threshhold then sorting the object.\r\n   * @return Results\r\n   */\n\n\n  processResults(input) {\n    debugger;\n    let processed = {};\n\n    for (let key in input) {\n      console.log(key);\n\n      if (input[key] > 10) {\n        processed.key = input.key;\n      }\n    }\n\n    return processed;\n  }\n  /**\r\n   * Creates playlist with one random song from each output artist\r\n   */\n\n\n  createPlaylist() {\n    let uris = []; //spotify.createPlaylist().then((pl) =>\n    // );\n  }\n  /**\r\n   *  Handles submission of Artist form\r\n   * @param {Object} e Submission event\r\n   * TODO: Error handling\r\n   */\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    spotify.setAccessToken(this.props.vars.token);\n    spotify.searchArtists(this.state.artist).then(res => this.getRecs(res.artists.items[0].name)).catch(err => this.handleError(err));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, this.state.errorStatus !== undefined ? /*#__PURE__*/React.createElement(Alert, {\n      className: \"alert-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 57\n      }\n    }, this.state.errorStatus) : null, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }, \"Enter artist's name for recommendations\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    }, \"Artist\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Artist\",\n      name: \"artist\",\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"submit\",\n      className: \"bg-primary text-light col-8 offset-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"reset\",\n      className: \"bg-primary text-light col-8 offset-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 33\n      }\n    }))))), this.state.resultReceived ? /*#__PURE__*/React.createElement(Button, {\n      className: \"mt-3\",\n      onClick: this.createPlaylist(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 47\n      }\n    }, \"Create a playlist with songs from these artists\") : null, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }, this.state.resultReceived ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 50\n      }\n    }, JSON.stringify(this.state.recOutput)) : null));\n  }\n\n} // mapping our redux state to box props\n\n\nconst mapStateToProps = state => {\n  return {\n    vars: state.vars\n  };\n}; // mapping the dispatches from our reducer to box props \n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    change: vName => dispatch({\n      type: 'CHANGE',\n      name: vName\n    })\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));","map":{"version":3,"sources":["C:/Users/rudiejd/Documents/crowdrec/app/src/components/SpotifyForm.js"],"names":["withRouter","React","Component","Card","Form","Button","Alert","styled","connect","SpotifyWebApi","spotify","SpotifyForm","constructor","props","state","resultReceived","recOutput","handleChange","bind","handleSubmit","processResults","getRecs","createPlaylist","countTracks","Styles","div","event","console","log","setState","target","value","name","render","handleError","err","status","errorStatus","id","output","MAX_SONGS","getPlaylistTracks","then","pt","curSongs","undefined","track","items","artists","promises","push","searchPlaylists","limit","searchTotal","offset","Math","floor","random","playlists","total","res","i","Promise","all","window","alert","JSON","stringify","input","processed","key","uris","e","preventDefault","setAccessToken","vars","token","searchArtists","artist","catch","mapStateToProps","mapDispatchToProps","dispatch","change","vName","type"],"mappings":"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","sourcesContent":["import { withRouter } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { Card, Form, Button, Alert} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport {connect} from 'react-redux';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nvar spotify = new SpotifyWebApi();\r\n\r\n\r\nclass SpotifyForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {resultReceived: false, recOutput: {}};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.processResults = this.processResults.bind(this);\r\n        this.getRecs = this.getRecs.bind(this);\r\n        this.createPlaylist = this.createPlaylist.bind(this);\r\n        this.countTracks = this.countTracks.bind(this);\r\n        const Styles = styled.div``;        \r\n    }\r\n    /**\r\n     * Handle change in the artist value\r\n     * @param {Object} event Event incurred by change \r\n     */\r\n    handleChange(event) {\r\n        console.log(this.state)\r\n        this.setState({resultReceived: false});\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({[name]: value});\r\n        this.render();\r\n    }\r\n    /**\r\n     * Handle errors by updating the state\r\n     * @param {Object} err \r\n     */\r\n    handleError(err) {\r\n        console.log(err);\r\n        switch (err.status) {\r\n            case 401:\r\n                this.setState({errorStatus: \"You don't seem to be authorized. Try authorizing with Spotify and trying again.\"});\r\n                break;\r\n            case 429:\r\n                this.setState({errorStatus: \"Looks like we're making too many requests to Spotify right now. Wait a little bit and try that again.\"})\r\n                break; \r\n            default:\r\n                this.setState({errorStatus: \"Some error occurred. Please try again.\"});\r\n        }\r\n\r\n    }\r\n\r\n    async countTracks(id, name, output) {\r\n        const MAX_SONGS = 50;\r\n        spotify.getPlaylistTracks(id).then(\r\n            pt => {\r\n                let curSongs = 0;\r\n                if (pt == undefined) {\r\n                    return;\r\n                }\r\n                for (let track of pt.items) {\r\n                    if (curSongs > MAX_SONGS) break;\r\n                    if (track.track != null \r\n                        && track.track.artists[0].name !== name\r\n                        && track.track.artists[0].name !== \"\") {\r\n                        if (track.track.artists[0].name in output) {\r\n                            output[track.track.artists[0].name]++;\r\n                        } else {\r\n                            output[track.track.artists[0].name] = 1;\r\n                        }\r\n                    }\r\n                    curSongs++;\r\n                }\r\n\r\n            });\r\n    }\r\n    /**\r\n     * Gets recommendations for a specific artist and outputs recOutput value in redux store\r\n     * @param {string} name The name of the artist\r\n     * TODO: catch errors again lol\r\n     * /\r\n    **/\r\n   getRecs(name) {\r\n        var output = {};\r\n        \r\n        let promises = [];\r\n        promises.push(spotify.searchPlaylists(name, {limit: 1})\r\n        .then(searchTotal => { promises.push(spotify.searchPlaylists(name, {limit: 50, offset: Math.floor(Math.random() * (searchTotal.playlists.total/50))}).then(\r\n            res => {\r\n                for (let i of res.playlists.items) {\r\n                        promises.push(this.countTracks(i.id, name, output).then(console.log(output)));\r\n                }\r\n            } \r\n        ))\r\n        }));\r\n\r\n        Promise.all(promises).then(() => window.alert(JSON.stringify(output)));\r\n    \r\n        \r\n    }\r\n    /**\r\n     * Processesresults from our query to spotify, removing entries beyond a certain threshhold then sorting the object.\r\n     * @return Results\r\n     */\r\n    processResults(input) {\r\n        debugger;\r\n        let processed = {};\r\n        for (let key in input)   {\r\n            console.log(key);\r\n            if (input[key]> 10) {\r\n                processed.key = input.key;\r\n            }\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    /**\r\n     * Creates playlist with one random song from each output artist\r\n     */\r\n    createPlaylist () {\r\n        let uris = [];\r\n\r\n        //spotify.createPlaylist().then((pl) =>\r\n            \r\n       // );\r\n    }\r\n\r\n    /**\r\n     *  Handles submission of Artist form\r\n     * @param {Object} e Submission event\r\n     * TODO: Error handling\r\n     */\r\n    handleSubmit(e) {        \r\n        e.preventDefault();\r\n        spotify.setAccessToken(this.props.vars.token);\r\n        spotify.searchArtists(this.state.artist)\r\n            .then(res => this.getRecs(res.artists.items[0].name))\r\n            \r\n            .catch(err => this.handleError(err));\r\n        \r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        \r\n            return (\r\n                <React.Fragment>\r\n                {this.state.errorStatus !== undefined ? <Alert className=\"alert-primary\">{this.state.errorStatus}</Alert> : null }\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>Enter artist's name for recommendations</Card.Title>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Group>\r\n                                <Form.Label>Artist</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Artist\"  name=\"artist\" onChange={this.handleChange} required></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"submit\" className=\"bg-primary text-light col-8 offset-2\">\r\n        \r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"reset\" className=\"bg-primary text-light col-8 offset-2\">\r\n        \r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Card.Body>\r\n                </Card>\r\n                {this.state.resultReceived  ? <Button className=\"mt-3\" onClick={this.createPlaylist()}>Create a playlist with songs from these artists</Button> : null} \r\n                <ul>{this.state.resultReceived ? <p>{JSON.stringify(this.state.recOutput)}</p> : null }</ul>\r\n                </React.Fragment>\r\n                \r\n            )\r\n        \r\n    }\r\n}\r\n\r\n// mapping our redux state to box props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      vars:state.vars\r\n    }\r\n  };\r\n  \r\n  // mapping the dispatches from our reducer to box props \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      change: (vName) => dispatch( {type: 'CHANGE', name: vName} ),\r\n  \r\n    }\r\n  \r\n  }\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));"]},"metadata":{},"sourceType":"module"}