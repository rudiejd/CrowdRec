{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\src\\\\components\\\\SpotifyForm.js\";\nimport { withRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Alert } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotify = new SpotifyWebApi();\n\nclass SpotifyForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      resultReceived: false,\n      recOutput: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    const Styles = styled.div``;\n  }\n  /**\r\n   * Handle change in the artist value\r\n   * @param {Object} event Event incurred by change \r\n   */\n\n\n  handleChange(event) {\n    this.setState({\n      resultsReceived: false\n    });\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n    this.render();\n  }\n  /**\r\n   * Handle errors by updating the state\r\n   * @param {Object} err \r\n   */\n\n\n  handleError(err) {\n    switch (err.status) {\n      case 401:\n        this.setState({\n          errorStatus: \"You don't seem to be authorized. Try authorizing with Spotify and trying again.\"\n        });\n        break;\n\n      case 429:\n        this.setState({\n          errorStatus: \"Looks like we're making too many requests to Spotify right now. Wait a little bit and try that again.\"\n        });\n    }\n  }\n  /**\r\n   * Gets recommendations for a specific artist and outputs recOutput value in redux store\r\n   * @param {string} name The name of the artist\r\n   * TODO: catch errors again lol\r\n   * /\r\n  **/\n\n\n  getRecs(name) {\n    for (let i = 0; i < 3; i++) {\n      debugger;\n      spotify.searchPlaylists(name, {\n        limit: 1\n      }).then(res => res.playlists.total).then(total => spotify.searchPlaylists(name, {\n        limit: 20,\n        offset: Math.floor(Math.random() * (total / 50))\n      }).then(res => {\n        res.playlists.items // wait in between each request so we don't hit the request limit\n        .forEach(i => setTimeout(() => {\n          spotify.getPlaylistTracks(i.id).then(pt => {\n            if (pt == undefined) {\n              return Promise.reject();\n            }\n\n            pt.items.forEach(track => {\n              if (track.track != null && track.track.artists[0].name !== name) {\n                if (track.track.artists[0].name in this.state.recOutput) {\n                  this.setState({\n                    recOutput: { ...this.state.recOutput,\n                      ...{\n                        [track.track.artists[0].name]: this.state.recOutput[track.track.artists[0].name]++\n                      }\n                    }\n                  });\n                } else {\n                  this.setState({\n                    recOutput: { ...this.state.recOutput,\n                      ...{\n                        [track.track.artists[0].name]: 1\n                      }\n                    }\n                  });\n                }\n              }\n            });\n          });\n        }, 200));\n        return;\n      })).then(this.processResults()).then(this.setState({\n        resultReceived: true\n      })).catch(err => this.handleError(err));\n    }\n  }\n  /**\r\n   * Processesresults from our query to spotify, removing entries beyond a certain threshhold then sorting the object.\r\n   * @return Promise for updated\r\n   */\n\n\n  processResults(results) {\n    let processed = {};\n\n    for (let key in results) {\n      if (results.hasOwnProperty(key) && results[key] > 10) {\n        processed[key] = results[key];\n      }\n    }\n\n    return this.setState({\n      recOutput: processed\n    });\n  }\n  /**\r\n   * Creates playlist with one random song from each output artist\r\n   */\n\n\n  createPlaylist() {\n    let uris = []; //spotify.createPlaylist().then((pl) =>\n    // );\n  }\n  /**\r\n   *  Handles submission of Artist form\r\n   * @param {Object} e Submission event\r\n   * TODO: Error handling\r\n   */\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    spotify.setAccessToken(this.props.vars.token);\n    spotify.searchArtists(this.state.artist).then(res => res.artists.items[0].name).then(name => this.getRecs(name)).catch(err => this.handleError(err));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, this.state.errorStatus !== undefined ? /*#__PURE__*/React.createElement(Alert, {\n      className: \"alert-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 57\n      }\n    }, this.state.errorStatus) : null, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, \"Enter artist's name for recommendations\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 33\n      }\n    }, \"Artist\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Artist\",\n      name: \"artist\",\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"submit\",\n      className: \"bg-primary text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 33\n      }\n    }))))), this.state.resultReceived ? /*#__PURE__*/React.createElement(Button, {\n      className: \"mt-3\",\n      onClick: this.createPlaylist(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 47\n      }\n    }, \"Create a playlist with songs from these artists\") : null, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, this.state.resultReceived ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 50\n      }\n    }, JSON.stringify(this.state.recOutput)) : null));\n  }\n\n} // mapping our redux state to box props\n\n\nconst mapStateToProps = state => {\n  return {\n    vars: state.vars\n  };\n}; // mapping the dispatches from our reducer to box props \n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    change: vName => dispatch({\n      type: 'CHANGE',\n      name: vName\n    })\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));","map":{"version":3,"sources":["C:/Users/rudiejd/Documents/crowdrec/app/src/components/SpotifyForm.js"],"names":["withRouter","React","Component","Card","Form","Button","Alert","styled","connect","SpotifyWebApi","spotify","SpotifyForm","constructor","props","state","resultReceived","recOutput","handleChange","bind","handleSubmit","Styles","div","event","setState","resultsReceived","target","value","name","render","handleError","err","status","errorStatus","getRecs","i","searchPlaylists","limit","then","res","playlists","total","offset","Math","floor","random","items","forEach","setTimeout","getPlaylistTracks","id","pt","undefined","Promise","reject","track","artists","processResults","catch","results","processed","key","hasOwnProperty","createPlaylist","uris","e","preventDefault","setAccessToken","vars","token","searchArtists","artist","JSON","stringify","mapStateToProps","mapDispatchToProps","dispatch","change","vName","type"],"mappings":"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","sourcesContent":["import { withRouter } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { Card, Form, Button, Alert} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport {connect} from 'react-redux';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nvar spotify = new SpotifyWebApi();\r\n\r\n\r\nclass SpotifyForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {resultReceived: false, recOutput: {}};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        const Styles = styled.div``;        \r\n    }\r\n    /**\r\n     * Handle change in the artist value\r\n     * @param {Object} event Event incurred by change \r\n     */\r\n    handleChange(event) {\r\n        this.setState({resultsReceived: false});\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({[name]: value});\r\n        this.render();\r\n    }\r\n    /**\r\n     * Handle errors by updating the state\r\n     * @param {Object} err \r\n     */\r\n    handleError(err) {\r\n        switch (err.status) {\r\n            case 401:\r\n                this.setState({errorStatus: \"You don't seem to be authorized. Try authorizing with Spotify and trying again.\"});\r\n                break;\r\n            case 429:\r\n                this.setState({errorStatus: \"Looks like we're making too many requests to Spotify right now. Wait a little bit and try that again.\"})\r\n        }\r\n\r\n    }\r\n    /**\r\n     * Gets recommendations for a specific artist and outputs recOutput value in redux store\r\n     * @param {string} name The name of the artist\r\n     * TODO: catch errors again lol\r\n     * /\r\n    **/\r\n    getRecs(name) {\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            debugger;\r\n            spotify.searchPlaylists(name, {limit: 1})\r\n            .then(res => res.playlists.total)\r\n            .then(total => spotify.searchPlaylists(name, {limit: 20, offset: Math.floor(Math.random() * (total/50))}).then(\r\n                res => {\r\n                    res.playlists.items\r\n                    // wait in between each request so we don't hit the request limit\r\n                        .forEach(i => setTimeout( () => {\r\n                            spotify.getPlaylistTracks(i.id).then(\r\n                                pt => {\r\n                                    if (pt == undefined) {\r\n                                        return Promise.reject();\r\n                                    }\r\n                                    pt.items.forEach(\r\n                                        track => {\r\n                                            if (track.track != null && track.track.artists[0].name !== name) {\r\n                                                if (track.track.artists[0].name in this.state.recOutput) {\r\n                                                    this.setState({recOutput: {...this.state.recOutput, ...{[track.track.artists[0].name]: this.state.recOutput[track.track.artists[0].name]++}}});\r\n                                                } else {\r\n                                                    this.setState({recOutput: {...this.state.recOutput, ...{[track.track.artists[0].name]: 1}}});\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                )\r\n                                })\r\n                        }, 200)  )\r\n                    return;\r\n                }\r\n            ))\r\n            .then(this.processResults())\r\n            .then(this.setState({resultReceived: true}))\r\n            .catch(err => this.handleError(err));\r\n        }    \r\n        \r\n    }\r\n    /**\r\n     * Processesresults from our query to spotify, removing entries beyond a certain threshhold then sorting the object.\r\n     * @return Promise for updated\r\n     */\r\n    processResults(results) {\r\n        let processed = {};\r\n\r\n        for (let key in results) {\r\n            if (results.hasOwnProperty(key) && results[key] > 10) {\r\n                processed[key] = results[key];\r\n            }\r\n        }\r\n        return this.setState({recOutput: processed});\r\n    }\r\n\r\n    /**\r\n     * Creates playlist with one random song from each output artist\r\n     */\r\n    createPlaylist () {\r\n        let uris = [];\r\n\r\n        //spotify.createPlaylist().then((pl) =>\r\n            \r\n       // );\r\n    }\r\n\r\n    /**\r\n     *  Handles submission of Artist form\r\n     * @param {Object} e Submission event\r\n     * TODO: Error handling\r\n     */\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        spotify.setAccessToken(this.props.vars.token);\r\n        spotify.searchArtists(this.state.artist)\r\n            .then(res => res.artists.items[0].name)\r\n            .then(name => this.getRecs(name))\r\n            .catch(err => this.handleError(err));\r\n        \r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        \r\n            return (\r\n                <React.Fragment>\r\n                {this.state.errorStatus !== undefined ? <Alert className=\"alert-primary\">{this.state.errorStatus}</Alert> : null }\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>Enter artist's name for recommendations</Card.Title>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Group>\r\n                                <Form.Label>Artist</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Artist\"  name=\"artist\" onChange={this.handleChange} required></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"submit\" className=\"bg-primary text-light\">\r\n        \r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Card.Body>\r\n                </Card>\r\n                {this.state.resultReceived  ? <Button className=\"mt-3\" onClick={this.createPlaylist()}>Create a playlist with songs from these artists</Button> : null} \r\n                <ul>{this.state.resultReceived ? <p>{JSON.stringify(this.state.recOutput)}</p> : null }</ul>\r\n                </React.Fragment>\r\n                \r\n            )\r\n        \r\n    }\r\n}\r\n\r\n// mapping our redux state to box props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      vars:state.vars\r\n    }\r\n  };\r\n  \r\n  // mapping the dispatches from our reducer to box props \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      change: (vName) => dispatch( {type: 'CHANGE', name: vName} ),\r\n  \r\n    }\r\n  \r\n  }\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));"]},"metadata":{},"sourceType":"module"}