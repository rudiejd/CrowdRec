{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\src\\\\components\\\\SpotifyForm.js\";\nimport { withRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Alert, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotify = new SpotifyWebApi();\n\nclass SpotifyForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      resultReceived: false,\n      recOutput: {},\n      errorStatus: undefined\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.processResults = this.processResults.bind(this);\n    this.getRecs = this.getRecs.bind(this);\n    this.createPlaylist = this.createPlaylist.bind(this);\n    this.countTracks = this.countTracks.bind(this);\n    this.getRandomTrack = this.getRandomTrack.bind(this);\n  }\n  /**\r\n     * Handle change in the artist value\r\n     * @param {Object} event Event incurred by change\r\n     */\n\n\n  handleChange(event) {\n    this.setState({\n      resultReceived: false,\n      alert: undefined\n    });\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target;\n    const {\n      name\n    } = target;\n    this.setState({\n      [name]: value\n    });\n    this.render();\n  }\n  /**\r\n     * Handle HTTP errors encountered by updating the state with an error message\r\n     * @param {Object} err\r\n     */\n\n\n  async handleError(err) {\n    switch (err.status) {\n      case 401:\n        this.setState({\n          errorStatus: 'You don\\'t seem to be authorized. Try clicking the button above to authorize with Spotify and try again.',\n          resultReceived: false\n        });\n        break;\n\n      case 429:\n        this.setState({\n          errorStatus: 'Looks like we\\'re making too many requests to Spotify right now. Wait a little bit and try that again.'\n        });\n        break;\n\n      case 501:\n        this.setState({\n          errorStatus: 'Spotify\\'s servers are fried! Check out their status, then try again when they\\'re back up'\n        });\n        break;\n\n      default:\n        window.alert(err);\n        this.setState({\n          errorStatus: 'An unknown error occurred. Maybe try again? Your guess is as good as mine'\n        });\n    }\n  }\n  /**\r\n     * Checks whether a playlist contains is valid. Criteria for validity are:\r\n     *  - playlist attributes are well-defined (no null properties)\r\n     *  - playlist must contain the artist for which user is searching\r\n     * @param {string} id ID of playlist\r\n     * @param {*} artist Name of artist\r\n     * @return {Promise<boolean>} true if playlist is valid, false otherwise\r\n     */\n\n\n  async isPlaylistValid(id, artist) {\n    return spotify.getPlaylistTracks(id).then(pt => {\n      if (pt === undefined) {\n        return;\n      }\n\n      for (const track of pt.items) {\n        if (track === undefined || track.track === null) {\n          continue;\n        } else if (track.track.artists[0].name === artist) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n  }\n  /**\r\n     * Asynchronously counts tracks by a given artist in a given playlist\r\n     * @param {string} id ID of the playlist\r\n     * @param {string} name Name of the artist\r\n     * @param {object} output Reference to output object which should be modified\r\n     * @return {Promise}\r\n     */\n\n\n  async countTracks(id, name, output) {\n    const MAX_SONGS = 200;\n    return spotify.getPlaylistTracks(id).then(pt => {\n      let curSongs = 0;\n\n      for (const track of pt.items) {\n        if (curSongs > MAX_SONGS) break;\n\n        if (track.track != null && track.track.artists[0].name !== name && track.track.artists[0].name !== '') {\n          if (track.track.artists[0].name in output) {\n            output[track.track.artists[0].name]++;\n          } else {\n            output[track.track.artists[0].name] = 1;\n          }\n        }\n\n        curSongs++;\n      }\n    }).catch(err => this.handleError(err));\n  }\n  /**\r\n     * Gets recommendations for a specific artist and outputs recOutput value in state\r\n     * @param {string} name The name of the artist\r\n     * @return {Promise}\r\n     * /\r\n    * */\n\n\n  async getRecs(name) {\n    debugger;\n    const output = {};\n    const promises = [];\n    await spotify.searchPlaylists(name, {\n      limit: 1\n    }).then(async searchTotal => await spotify.searchPlaylists(name, {\n      limit: 50,\n      offset: Math.floor(Math.random() * (searchTotal.playlists.total / 50))\n    }).then(res => {\n      for (const i of res.playlists.items) {\n        promises.push(this.isPlaylistValid(i.id, name).then(valid => valid ? this.countTracks(i.id, name, output) : null));\n      }\n    })).catch(err => this.handleError(err));\n    return Promise.all(promises).then(() => this.setState({\n      recOutput: this.processResults(output),\n      artist: name\n    }));\n  }\n  /**\r\n     * Processesresults from our query to spotify, removing entries beyond a certain threshhold then sorting the object.\r\n     * @return Results\r\n     */\n\n\n  processResults(input) {\n    const processed = {};\n\n    for (const key in input) {\n      if (input[key] > 10) {\n        processed[key] = input[key];\n      }\n    }\n\n    const sorted = Object.fromEntries(Object.entries(processed).sort(([, a], [, b]) => b - a));\n    return sorted;\n  }\n\n  getRandomTrack(band) {\n    return spotify.searchTracks(band, {\n      limit: 1\n    }).then(searchTotal => spotify.searchTracks(band, {\n      limit: 50,\n      offset: Math.floor(Math.random() * (searchTotal.tracks.total / 51))\n    })).then(tracks => {\n      if (tracks === undefined || tracks.tracks === undefined) {\n        console.log(tracks);\n      }\n\n      return tracks.tracks.items[Math.floor(Math.random() * 48)];\n    }).catch(err => {\n      this.handleError(err);\n      return setTimeout(this.getRandomTrack(band), 500);\n    });\n  }\n  /**\r\n     * Creates playlist with one random song from each output artist\r\n     */\n\n\n  createPlaylist() {\n    debugger;\n    const promises = [];\n    const trackUris = [];\n    Object.keys(this.state.recOutput).forEach(async artist => {\n      promises.push(setTimeout(this.getRandomTrack(artist).then(track => trackUris.push(track.uri)).catch(err => this.handleError(err)), 500));\n    }); // this.setState({playlistUrl: playlist.external_urls[\"spotify\"]})\n\n    Promise.all(promises).then(() => {\n      if (this.state.errorStatus === undefined) {\n        const addPromises = [];\n        spotify.getMe().then(me => spotify.createPlaylist(me.id, {\n          name: `Recommendations Based on ${this.state.artist}`,\n          public: false\n        })).then(playlist => {\n          trackUris.forEach(uri => addPromises.push(setTimeout(spotify.addTracksToPlaylist(playlist.id, [uri]), 500)));\n          this.setState({\n            playlistUrl: playlist.external_urls.spotify\n          });\n        });\n        Promise.all(addPromises).then(() => this.setState({\n          alert: 'Playlist created! Click below to open it up. Enjoy :)'\n        }));\n      }\n    });\n  }\n  /**\r\n     *  Handles submission of Artist form\r\n     * @param {Object} e Submission event\r\n     * TODO: Error handling\r\n     */\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    spotify.setAccessToken(this.props.vars.token);\n    this.setState({\n      errorStatus: undefined,\n      alert: undefined\n    });\n    console.log(this.state);\n    spotify.searchArtists(this.state.artist).then(async res => await this.getRecs(res.artists.items[0].name)).then(() => {\n      // Only show recommendations if they're non empty\n      if (this.state.errorStatus === undefined) {\n        if (Object.keys(this.state.recOutput).length === 0) {\n          this.setState({\n            errorStatus: 'Unfortunately, we could not find any recommendations for that artist at this time. Feel free to try another one, or try again since recommendations are randomly generated.'\n          });\n        } else {\n          this.setState({\n            resultReceived: true\n          });\n        }\n      }\n    }).catch(err => {\n      if (err.status == 429) {\n        setTimeout(handleSubmit(e), 500);\n      }\n\n      this.handleError(err);\n    });\n  }\n  /**\r\n     * Render the component\r\n     * @return JSX\r\n     */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.alert !== undefined ? /*#__PURE__*/React.createElement(Alert, {\n      className: \"alert-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, this.state.alert, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.playlistUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, this.state.playlistUrl)) : null, this.state.errorStatus !== undefined ? /*#__PURE__*/React.createElement(Alert, {\n      className: \"alert-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 49\n      }\n    }, this.state.errorStatus) : null, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }\n    }, \"Enter artist's name for recommendations\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }, \"Artist\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Iron Maiden\",\n      name: \"artist\",\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"submit\",\n      className: \"bg-primary text-light col-8 offset-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"reset\",\n      className: \"bg-primary text-light col-8 offset-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }\n    }, this.state.resultReceived ? /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }\n    }, \"Recommended Artists Based on\", this.state.artist) : null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }\n    }, this.state.resultReceived ? Object.keys(this.state.recOutput).map(band => /*#__PURE__*/React.createElement(\"li\", {\n      key: band,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }\n    }, band, \":\", ' ', this.state.recOutput[band])) : null), this.state.resultReceived ? /*#__PURE__*/React.createElement(Button, {\n      className: \"mt-3 col-6 h-50 w-50\",\n      onClick: this.createPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 42\n      }\n    }, \"Create a playlist with songs from these artists\") : null)));\n  }\n\n} // mapping our redux state to box props\n\n\nconst mapStateToProps = state => ({\n  vars: state.vars\n}); // mapping the dispatches from our reducer to box props\n\n\nconst mapDispatchToProps = dispatch => ({\n  change: vName => dispatch({\n    type: 'CHANGE',\n    name: vName\n  })\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));","map":{"version":3,"sources":["C:/Users/rudiejd/Documents/crowdrec/app/src/components/SpotifyForm.js"],"names":["withRouter","React","Component","Card","Form","Button","Alert","Row","connect","SpotifyWebApi","spotify","SpotifyForm","constructor","props","state","resultReceived","recOutput","errorStatus","undefined","handleChange","bind","handleSubmit","processResults","getRecs","createPlaylist","countTracks","getRandomTrack","event","setState","alert","target","value","name","render","handleError","err","status","window","isPlaylistValid","id","artist","getPlaylistTracks","then","pt","track","items","artists","output","MAX_SONGS","curSongs","catch","promises","searchPlaylists","limit","searchTotal","offset","Math","floor","random","playlists","total","res","i","push","valid","Promise","all","input","processed","key","sorted","Object","fromEntries","entries","sort","a","b","band","searchTracks","tracks","console","log","setTimeout","trackUris","keys","forEach","uri","addPromises","getMe","me","public","playlist","addTracksToPlaylist","playlistUrl","external_urls","e","preventDefault","setAccessToken","vars","token","searchArtists","length","map","mapStateToProps","mapDispatchToProps","dispatch","change","vName","type"],"mappings":"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","sourcesContent":["import {withRouter} from 'react-router-dom';\r\nimport React, {Component} from 'react';\r\nimport {\r\n  Card, Form, Button, Alert, Row,\r\n} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nconst spotify = new SpotifyWebApi();\r\n\r\n\r\nclass SpotifyForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {resultReceived: false, recOutput: {}, errorStatus: undefined};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.processResults = this.processResults.bind(this);\r\n    this.getRecs = this.getRecs.bind(this);\r\n    this.createPlaylist = this.createPlaylist.bind(this);\r\n    this.countTracks = this.countTracks.bind(this);\r\n    this.getRandomTrack = this.getRandomTrack.bind(this);\r\n  }\r\n\r\n  /**\r\n     * Handle change in the artist value\r\n     * @param {Object} event Event incurred by change\r\n     */\r\n  handleChange(event) {\r\n    this.setState({resultReceived: false, alert: undefined});\r\n    const {target} = event;\r\n    const {value} = target;\r\n    const {name} = target;\r\n    this.setState({[name]: value});\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n     * Handle HTTP errors encountered by updating the state with an error message\r\n     * @param {Object} err\r\n     */\r\n  async handleError(err) {\r\n    switch (err.status) {\r\n      case 401:\r\n        this.setState({errorStatus: 'You don\\'t seem to be authorized. Try clicking the button above to authorize with Spotify and try again.', resultReceived: false});\r\n        break;\r\n      case 429:\r\n        this.setState({errorStatus: 'Looks like we\\'re making too many requests to Spotify right now. Wait a little bit and try that again.'});\r\n        break;\r\n      case 501:\r\n        this.setState({errorStatus: 'Spotify\\'s servers are fried! Check out their status, then try again when they\\'re back up'});\r\n        break;\r\n      default:\r\n        window.alert(err);\r\n        this.setState({errorStatus: 'An unknown error occurred. Maybe try again? Your guess is as good as mine'});\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Checks whether a playlist contains is valid. Criteria for validity are:\r\n     *  - playlist attributes are well-defined (no null properties)\r\n     *  - playlist must contain the artist for which user is searching\r\n     * @param {string} id ID of playlist\r\n     * @param {*} artist Name of artist\r\n     * @return {Promise<boolean>} true if playlist is valid, false otherwise\r\n     */\r\n  async isPlaylistValid(id, artist) {\r\n    return spotify.getPlaylistTracks(id)\r\n        .then(\r\n            (pt) => {\r\n              if (pt === undefined) {\r\n                return;\r\n              }\r\n              for (const track of pt.items) {\r\n                if (track === undefined || track.track === null) {\r\n                  continue;\r\n                } else if (track.track.artists[0].name === artist) {\r\n                  return true;\r\n                }\r\n              }\r\n              return false;\r\n            },\r\n        );\r\n  }\r\n\r\n  /**\r\n     * Asynchronously counts tracks by a given artist in a given playlist\r\n     * @param {string} id ID of the playlist\r\n     * @param {string} name Name of the artist\r\n     * @param {object} output Reference to output object which should be modified\r\n     * @return {Promise}\r\n     */\r\n  async countTracks(id, name, output) {\r\n    const MAX_SONGS = 200;\r\n    return spotify.getPlaylistTracks(id).then(\r\n        (pt) => {\r\n          let curSongs = 0;\r\n          for (const track of pt.items) {\r\n            if (curSongs > MAX_SONGS) break;\r\n            if (track.track != null &&\r\n                        track.track.artists[0].name !== name &&\r\n                        track.track.artists[0].name !== '') {\r\n              if (track.track.artists[0].name in output) {\r\n                output[track.track.artists[0].name]++;\r\n              } else {\r\n                output[track.track.artists[0].name] = 1;\r\n              }\r\n            }\r\n            curSongs++;\r\n          }\r\n        },\r\n    ).catch((err) => this.handleError(err));\r\n  }\r\n\r\n  /**\r\n     * Gets recommendations for a specific artist and outputs recOutput value in state\r\n     * @param {string} name The name of the artist\r\n     * @return {Promise}\r\n     * /\r\n    * */\r\n  async getRecs(name) {\r\n    debugger;\r\n    const output = {};\r\n\r\n    const promises = [];\r\n    await spotify.searchPlaylists(name, {limit: 1})\r\n        .then(async (searchTotal) => await spotify.searchPlaylists(name, {limit: 50, offset: Math.floor(Math.random() * (searchTotal.playlists.total / 50))}).then(\r\n            (res) => {\r\n              for (const i of res.playlists.items) {\r\n                promises.push(this.isPlaylistValid(i.id, name)\r\n                    .then((valid) => (valid ? this.countTracks(i.id, name, output) : null)));\r\n              }\r\n            },\r\n        )).catch((err) => this.handleError(err));\r\n\r\n    return Promise.all(promises).then(() => this.setState({recOutput: this.processResults(output), artist: name}));\r\n  }\r\n\r\n  /**\r\n     * Processesresults from our query to spotify, removing entries beyond a certain threshhold then sorting the object.\r\n     * @return Results\r\n     */\r\n  processResults(input) {\r\n    const processed = {};\r\n    for (const key in input) {\r\n      if (input[key] > 10) {\r\n        processed[key] = input[key];\r\n      }\r\n    }\r\n    const sorted = Object.fromEntries(\r\n        Object.entries(processed).sort(([, a], [, b]) => b - a),\r\n    );\r\n    return sorted;\r\n  }\r\n\r\n\r\n  getRandomTrack(band) {\r\n    return spotify.searchTracks(band, {limit: 1})\r\n        .then((searchTotal) => spotify.searchTracks(band, {limit: 50, offset: Math.floor(Math.random() * (searchTotal.tracks.total / 51))}))\r\n        .then(\r\n            (tracks) => {\r\n              if (tracks === undefined || tracks.tracks === undefined) {\r\n                console.log(tracks);\r\n                \r\n              }\r\n              return tracks.tracks.items[Math.floor(Math.random() * 48)];\r\n            },\r\n        ).catch(err => { \r\n            this.handleError(err); \r\n            return setTimeout(this.getRandomTrack(band), 500); \r\n        })\r\n  }\r\n\r\n  /**\r\n     * Creates playlist with one random song from each output artist\r\n     */\r\n  createPlaylist() {\r\n    debugger;\r\n    const promises = [];\r\n    const trackUris = [];\r\n\r\n    Object.keys(this.state.recOutput).forEach(async (artist) => {\r\n      promises.push(\r\n          setTimeout(this.getRandomTrack(artist)\r\n              .then((track) => trackUris.push(track.uri))\r\n              .catch((err) => this.handleError(err)), 500),\r\n      );\r\n    });\r\n\r\n    // this.setState({playlistUrl: playlist.external_urls[\"spotify\"]})\r\n    Promise.all(promises).then(() => {\r\n      if (this.state.errorStatus === undefined) {\r\n        const addPromises = [];\r\n        spotify.getMe()\r\n            .then((me) => spotify.createPlaylist(me.id, {name: `Recommendations Based on ${this.state.artist}`, public: false}))\r\n            .then((playlist) => {\r\n              trackUris.forEach(\r\n                  (uri) => addPromises.push(setTimeout(spotify.addTracksToPlaylist(playlist.id, [uri]), 500)),\r\n              );\r\n              this.setState({playlistUrl: playlist.external_urls.spotify});\r\n            });\r\n        Promise.all(addPromises).then(() => this.setState({alert: 'Playlist created! Click below to open it up. Enjoy :)'}));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n     *  Handles submission of Artist form\r\n     * @param {Object} e Submission event\r\n     * TODO: Error handling\r\n     */\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    spotify.setAccessToken(this.props.vars.token);\r\n    this.setState({errorStatus: undefined, alert: undefined});\r\n    console.log(this.state);\r\n    spotify.searchArtists(this.state.artist)\r\n        .then(async (res) => await this.getRecs(res.artists.items[0].name))\r\n        .then(() => {\r\n        // Only show recommendations if they're non empty\r\n          if (this.state.errorStatus === undefined) {\r\n            if (Object.keys(this.state.recOutput).length === 0) {\r\n              this.setState(\r\n                  {errorStatus: 'Unfortunately, we could not find any recommendations for that artist at this time. Feel free to try another one, or try again since recommendations are randomly generated.'},\r\n              );\r\n            } else {\r\n              this.setState({resultReceived: true});\r\n            }\r\n          }\r\n        })\r\n        .catch((err) => {\r\n            if (err.status == 429) {\r\n                setTimeout(handleSubmit(e), 500);\r\n            } \r\n            this.handleError(err)}\r\n        );\r\n  }\r\n\r\n\r\n  /**\r\n     * Render the component\r\n     * @return JSX\r\n     */\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.alert !== undefined ? (\r\n          <Alert className=\"alert-success\">\r\n            {this.state.alert}\r\n            <br />\r\n            <a href={this.state.playlistUrl}>{this.state.playlistUrl}</a>\r\n          </Alert>\r\n        ) : null }\r\n        {this.state.errorStatus !== undefined ? <Alert className=\"alert-danger\">{this.state.errorStatus}</Alert> : null }\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Enter artist's name for recommendations</Card.Title>\r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Group>\r\n                <Form.Label>Artist</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Iron Maiden\" name=\"artist\" onChange={this.handleChange} required />\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Control type=\"submit\" className=\"bg-primary text-light col-8 offset-2\" />\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Control type=\"reset\" className=\"bg-primary text-light col-8 offset-2\" />\r\n              </Form.Group>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n        <div className=\"d-block\">\r\n          {this.state.resultReceived ? (\r\n            <h4>\r\n              Recommended Artists Based on\r\n              {this.state.artist}\r\n            </h4>\r\n          ) : null }\r\n          <Row>\r\n            <ul className=\"col-6\">\r\n              {this.state.resultReceived ? Object.keys(this.state.recOutput).map((band) => (\r\n                <li key={band}>\r\n                  {band}\r\n                  :\r\n                  {' '}\r\n                  {this.state.recOutput[band]}\r\n                </li>\r\n              )) : null }\r\n            </ul>\r\n            {this.state.resultReceived ? <Button className=\"mt-3 col-6 h-50 w-50\" onClick={this.createPlaylist}>Create a playlist with songs from these artists</Button> : null}\r\n          </Row>\r\n        </div>\r\n\r\n      </>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\n// mapping our redux state to box props\r\nconst mapStateToProps = (state) => ({\r\n  vars: state.vars,\r\n});\r\n\r\n// mapping the dispatches from our reducer to box props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  change: (vName) => dispatch({type: 'CHANGE', name: vName}),\r\n\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));\r\n"]},"metadata":{},"sourceType":"module"}