{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rudiejd\\\\Documents\\\\crowdrec\\\\app\\\\src\\\\components\\\\SpotifyForm.js\";\nimport { withRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Alert } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotify = new SpotifyWebApi();\n\nclass SpotifyForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    const Styles = styled.div``;\n  }\n  /**\r\n   * Handle change in the artist value\r\n   * @param {Object} event Event incurred by change \r\n   */\n\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.props.change({\n      name: name,\n      value: value\n    });\n\n    if (this.props.vars.recOutput !== undefined) {\n      console.log(Object.keys(this.props.vars.recOutput).length);\n    }\n  }\n  /**\r\n   * Handle errors by updating the state\r\n   * @param {Object} err \r\n   */\n\n\n  handleError(err) {\n    switch (err.status) {\n      case 401:\n        this.props.change({\n          name: \"errorStatus\",\n          value: \"You don't seem to be authorized. Try authorizing with Spotify and trying again.\"\n        });\n        break;\n\n      case 429:\n        this.props.change({\n          name: \"errorStatus\",\n          value: \"Looks like we're making too many requests to Spotify right now. Wait a little bit and try that again.\"\n        });\n    }\n  }\n  /**\r\n   * Gets recommendations for a specific artist and outputs recOutput value in redux store\r\n   * @param {string} name The name of the artist\r\n   * TODO: catch errors again lol\r\n   * /\r\n  **/\n\n\n  getRecs(name) {\n    let output = Object();\n    console.log(name);\n\n    for (let i = 0; i < 3; i++) {\n      spotify.searchPlaylists(name, {\n        limit: 1\n      }).then(res => res.playlists.total).then(total => spotify.searchPlaylists(name, {\n        limit: 20,\n        offset: Math.floor(Math.random() * (total / 50))\n      }).then(res => {\n        res.playlists.items // wait in between each request so we don't hit the request limit\n        .forEach(i => setTimeout(() => {\n          spotify.getPlaylistTracks(i.id).then(pt => {\n            if (pt == undefined) {\n              return Promise.reject();\n            }\n\n            pt.items.forEach(track => {\n              if (track.track != null && track.track.artists[0].name !== name) {\n                if (track.track.artists[0].name in output) {\n                  output[track.track.artists[0].name]++;\n                } else {\n                  output[track.track.artists[0].name] = 1;\n                }\n              }\n            });\n          });\n        }, 200));\n      })).catch(err => this.handleError(err));\n    }\n\n    this.props.change({\n      name: \"recOutput\",\n      value: output\n    });\n  }\n  /**\r\n   * Creates playlist with one random song from each output artist\r\n   */\n\n\n  createPlaylist() {\n    let uris = []; //spotify.createPlaylist().then((pl) =>\n    // );\n  }\n  /**\r\n   *  Handles submission of Artist form\r\n   * @param {Object} e Submission event\r\n   * TODO: Error handling\r\n   */\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    spotify.setAccessToken(this.props.vars.token);\n    spotify.searchArtists(this.props.vars.artist).then(res => res.artists.items[0].name).then(name => this.getRecs(name)).catch(err => this.handleError(err));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, this.props.vars.errorStatus !== undefined ? /*#__PURE__*/React.createElement(Alert, {\n      className: \"alert-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 62\n      }\n    }, this.props.vars.errorStatus) : null, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }\n    }, \"Enter artist's name for recommendations\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 33\n      }\n    }, \"Artist\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Artist\",\n      name: \"artist\",\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"submit\",\n      className: \"bg-primary text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 33\n      }\n    }))))), this.props.vars.recOutput !== undefined ? /*#__PURE__*/React.createElement(Button, {\n      className: \"mt-3\",\n      onClick: this.createPlaylist(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 60\n      }\n    }, \"Create a playlist with songs from these artists\") : null, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, this.props.vars.recOutput !== undefined ? console.log(JSON.parse(JSON.stringify(this.props.vars.recOutput))) : null));\n  }\n\n} // mapping our redux state to box props\n\n\nconst mapStateToProps = state => {\n  return {\n    vars: state.vars\n  };\n}; // mapping the dispatches from our reducer to box props \n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    change: vName => dispatch({\n      type: 'CHANGE',\n      name: vName\n    })\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));","map":{"version":3,"sources":["C:/Users/rudiejd/Documents/crowdrec/app/src/components/SpotifyForm.js"],"names":["withRouter","React","Component","Card","Form","Button","Alert","styled","connect","SpotifyWebApi","spotify","SpotifyForm","constructor","props","handleChange","bind","handleSubmit","Styles","div","event","target","value","name","change","vars","recOutput","undefined","console","log","Object","keys","length","handleError","err","status","getRecs","output","i","searchPlaylists","limit","then","res","playlists","total","offset","Math","floor","random","items","forEach","setTimeout","getPlaylistTracks","id","pt","Promise","reject","track","artists","catch","createPlaylist","uris","e","preventDefault","setAccessToken","token","searchArtists","artist","render","errorStatus","JSON","parse","stringify","mapStateToProps","state","mapDispatchToProps","dispatch","vName","type"],"mappings":"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","sourcesContent":["import { withRouter } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { Card, Form, Button, Alert} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport {connect} from 'react-redux';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nvar spotify = new SpotifyWebApi();\r\n\r\n\r\nclass SpotifyForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        const Styles = styled.div``;        \r\n    }\r\n    /**\r\n     * Handle change in the artist value\r\n     * @param {Object} event Event incurred by change \r\n     */\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.props.change({name: name, value: value});\r\n        if (this.props.vars.recOutput !== undefined) {\r\n            console.log(Object.keys(this.props.vars.recOutput).length);\r\n        }\r\n    }\r\n    /**\r\n     * Handle errors by updating the state\r\n     * @param {Object} err \r\n     */\r\n    handleError(err) {\r\n        switch (err.status) {\r\n            case 401:\r\n                this.props.change({name: \"errorStatus\", value: \"You don't seem to be authorized. Try authorizing with Spotify and trying again.\"})\r\n                break;\r\n            case 429:\r\n                this.props.change({name: \"errorStatus\", value: \"Looks like we're making too many requests to Spotify right now. Wait a little bit and try that again.\"})\r\n        }\r\n\r\n    }\r\n    /**\r\n     * Gets recommendations for a specific artist and outputs recOutput value in redux store\r\n     * @param {string} name The name of the artist\r\n     * TODO: catch errors again lol\r\n     * /\r\n    **/\r\n    getRecs(name) {\r\n        let output = Object();\r\n        console.log(name);\r\n        for (let i = 0; i < 3; i++) {\r\n            spotify.searchPlaylists(name, {limit: 1})\r\n            .then(res => res.playlists.total)\r\n            .then(total => spotify.searchPlaylists(name, {limit: 20, offset: Math.floor(Math.random() * (total/50))}).then(\r\n                res => {res.playlists.items\r\n                        // wait in between each request so we don't hit the request limit\r\n                        .forEach(i => setTimeout( () => {\r\n                            spotify.getPlaylistTracks(i.id).then(\r\n                                pt => {\r\n                                    if (pt == undefined) {\r\n                                        return Promise.reject();\r\n                                    }\r\n                                    pt.items.forEach(\r\n                                        track => {\r\n                                            if (track.track != null && track.track.artists[0].name !== name) {\r\n                                                if (track.track.artists[0].name in output) {\r\n                                                    output[track.track.artists[0].name]++;\r\n                                                } else {\r\n                                                    output[track.track.artists[0].name] = 1;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                )\r\n                                })\r\n                        }, 200)  )\r\n                }\r\n            )).catch(err => this.handleError(err))\r\n        }\r\n\r\n        this.props.change({name: \"recOutput\", value: output});\r\n        \r\n        \r\n    }\r\n\r\n    /**\r\n     * Creates playlist with one random song from each output artist\r\n     */\r\n    createPlaylist () {\r\n        let uris = [];\r\n\r\n        //spotify.createPlaylist().then((pl) =>\r\n            \r\n       // );\r\n    }\r\n\r\n    /**\r\n     *  Handles submission of Artist form\r\n     * @param {Object} e Submission event\r\n     * TODO: Error handling\r\n     */\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        spotify.setAccessToken(this.props.vars.token);\r\n        spotify.searchArtists(this.props.vars.artist)\r\n            .then(res => res.artists.items[0].name)\r\n            .then(name => this.getRecs(name))\r\n            .catch(err => this.handleError(err));\r\n        \r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        \r\n            return (\r\n                <React.Fragment>\r\n                {this.props.vars.errorStatus !== undefined ? <Alert className=\"alert-primary\">{this.props.vars.errorStatus}</Alert> : null }\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>Enter artist's name for recommendations</Card.Title>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Group>\r\n                                <Form.Label>Artist</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Artist\"  name=\"artist\" onChange={this.handleChange} required></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"submit\" className=\"bg-primary text-light\">\r\n        \r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Card.Body>\r\n                </Card>\r\n                {this.props.vars.recOutput !== undefined ? <Button className=\"mt-3\" onClick={this.createPlaylist()}>Create a playlist with songs from these artists</Button> : null} \r\n                <ul>{this.props.vars.recOutput !== undefined ? console.log(JSON.parse(JSON.stringify(this.props.vars.recOutput))) : null }</ul>\r\n                </React.Fragment>\r\n                \r\n            )\r\n        \r\n    }\r\n}\r\n\r\n// mapping our redux state to box props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      vars:state.vars\r\n    }\r\n  };\r\n  \r\n  // mapping the dispatches from our reducer to box props \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      change: (vName) => dispatch( {type: 'CHANGE', name: vName} ),\r\n  \r\n    }\r\n  \r\n  }\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));"]},"metadata":{},"sourceType":"module"}