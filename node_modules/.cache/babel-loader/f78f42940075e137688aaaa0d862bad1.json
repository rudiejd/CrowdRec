{"ast":null,"code":"var _jsxFileName = \"/home/jd/git/CrowdRec/src/components/SpotifyAuth.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { connect } from 'react-redux'; // I got most of this authorization method from StackOverflow. I used redux to share the token across components. \n\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\n\nclass SpotifyAuth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAuthenticatedWithSpotify: false\n    };\n    this.state.handleRedirect = this.handleRedirect.bind(this);\n  }\n  /**\n   * Runs after component mounts,  decodes the access token if applicable\n   */\n\n\n  componentDidMount() {\n    const hash = window.location.hash.substring(1).split('&').reduce(function (initial, item) {\n      if (item) {\n        var parts = item.split('=');\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n      }\n\n      return initial;\n    }, {});\n    const access_token = hash.access_token;\n    this.props.change({\n      'name': 'token',\n      'value': access_token\n    });\n  }\n  /**\n   * On click of button, redirect to the spotify Implicit-Grant flow portal with our presets. Auth modes used:\n   *  user-read-private\n   *  playlist-modify-public\n   *  playlist-modify-private\n   * @param {*} event Change event for button \n   */\n\n\n  handleRedirect(event) {\n    event.preventDefault();\n    console.log(process.env.PUBLIC_URL);\n    let url = 'https://accounts.spotify.com/authorize' + '?response_type=token' + '&client_id=3f31f6d13b974219a7093698a47d76f9' + '&scope=' + encodeURIComponent('user-read-private%20playlist-modify-public%20playlist-modify-private') + '&redirect_uri=' + encodeURIComponent('localhost:3000');\n    window.location = url;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Button, {\n      className: \"sp_button\",\n      onClick: event => this.handleRedirect(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, \"Link spotify to get started\");\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    vars: state.vars\n  };\n}; // mapping the dispatches from our reducer to box props \n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    change: vName => dispatch({\n      type: 'CHANGE',\n      name: vName\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpotifyAuth);","map":{"version":3,"sources":["/home/jd/git/CrowdRec/src/components/SpotifyAuth.js"],"names":["React","Component","Button","connect","authEndpoint","SpotifyAuth","constructor","props","state","isAuthenticatedWithSpotify","handleRedirect","bind","componentDidMount","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","access_token","change","event","preventDefault","console","log","process","env","PUBLIC_URL","url","encodeURIComponent","render","mapStateToProps","vars","mapDispatchToProps","dispatch","vName","type","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,MAAR,QAAqB,iBAArB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;;AAEA,OAAO,MAAMC,YAAY,GAAG,wCAArB;;AACP,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAClCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,0BAA0B,EAAE;AADjB,KAAb;AAGA,SAAKD,KAAL,CAAWE,cAAX,GAA4B,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAA5B;AACD;AACD;;;;;AAGAC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CACZG,SADY,CACF,CADE,EAEZC,KAFY,CAEN,GAFM,EAGZC,MAHY,CAGL,UAAUC,OAAV,EAAmBC,IAAnB,EAAyB;AAC/B,UAAIA,IAAJ,EAAU;AACR,YAAIC,KAAK,GAAGD,IAAI,CAACH,KAAL,CAAW,GAAX,CAAZ;AACAE,QAAAA,OAAO,CAACE,KAAK,CAAC,CAAD,CAAN,CAAP,GAAoBC,kBAAkB,CAACD,KAAK,CAAC,CAAD,CAAN,CAAtC;AACD;;AACD,aAAOF,OAAP;AACD,KATY,EASV,EATU,CAAb;AAWA,UAAMI,YAAY,GAAGV,IAAI,CAACU,YAA1B;AACA,SAAKhB,KAAL,CAAWiB,MAAX,CAAkB;AAAC,cAAQ,OAAT;AAAkB,eAASD;AAA3B,KAAlB;AAGD;AACH;;;;;;;;;AAOEb,EAAAA,cAAc,CAACe,KAAD,EAAQ;AACpBA,IAAAA,KAAK,CAACC,cAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,UAAxB;AAEA,QAAIC,GAAG,GACL,2CACA,sBADA,GAEA,6CAFA,GAGA,SAHA,GAIAC,kBAAkB,CAAC,sEAAD,CAJlB,GAKA,gBALA,GAMAA,kBAAkB,CAAC,gBAAD,CAPpB;AAQEnB,IAAAA,MAAM,CAACC,QAAP,GAAkBiB,GAAlB;AACH;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBAEI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAGT,KAAD,IAAW,KAAKf,cAAL,CAAoBe,KAApB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFJ;AAMD;;AAzDiC;;AA4DpC,MAAMU,eAAe,GAAI3B,KAAD,IAAW;AAC/B,SAAO;AACL4B,IAAAA,IAAI,EAAC5B,KAAK,CAAC4B;AADN,GAAP;AAGD,CAJH,C,CAME;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLd,IAAAA,MAAM,EAAGe,KAAD,IAAWD,QAAQ,CAAE;AAACE,MAAAA,IAAI,EAAE,QAAP;AAAiBC,MAAAA,IAAI,EAAEF;AAAvB,KAAF;AADtB,GAAP;AAKD,CAND;;AAQF,eAAepC,OAAO,CAACgC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChC,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {Button} from 'react-bootstrap';\nimport {connect} from 'react-redux';\n\n// I got most of this authorization method from StackOverflow. I used redux to share the token across components. \n\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\nclass SpotifyAuth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAuthenticatedWithSpotify: false\n    };\n    this.state.handleRedirect = this.handleRedirect.bind(this);\n  }\n  /**\n   * Runs after component mounts,  decodes the access token if applicable\n   */\n  componentDidMount() {\n    const hash = window.location.hash\n    .substring(1)\n    .split('&')\n    .reduce(function (initial, item) {\n      if (item) {\n        var parts = item.split('=');\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n      }\n      return initial;\n    }, {});\n\n    const access_token = hash.access_token;\n    this.props.change({'name': 'token', 'value': access_token})\n    \n    \n  }\n/**\n * On click of button, redirect to the spotify Implicit-Grant flow portal with our presets. Auth modes used:\n *  user-read-private\n *  playlist-modify-public\n *  playlist-modify-private\n * @param {*} event Change event for button \n */\n  handleRedirect(event) {\n    event.preventDefault();\n    console.log(process.env.PUBLIC_URL)\n\n    let url =\n      'https://accounts.spotify.com/authorize' +    \n      '?response_type=token' +\n      '&client_id=3f31f6d13b974219a7093698a47d76f9' +\n      '&scope=' +\n      encodeURIComponent('user-read-private%20playlist-modify-public%20playlist-modify-private') +\n      '&redirect_uri=' +\n      encodeURIComponent('localhost:3000');\n      window.location = url;\n  }\n\n  render() {\n    return (\n\n        <Button className=\"sp_button\" onClick={(event) => this.handleRedirect(event)} >\n          Link spotify to get started\n        </Button>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      vars:state.vars\n    }\n  };\n  \n  // mapping the dispatches from our reducer to box props \n  const mapDispatchToProps = (dispatch) => {\n    return {\n      change: (vName) => dispatch( {type: 'CHANGE', name: vName} ),\n  \n    }\n  \n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpotifyAuth);"]},"metadata":{},"sourceType":"module"}