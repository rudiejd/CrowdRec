{"version":3,"sources":["components/SpotifyForm.js","components/SpotifyAuth.js","Home.js","components/PaypalDonate.js","About.js","Nomatch.js","components/Navigation.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["spotify","SpotifyWebApi","SpotifyForm","props","state","resultReceived","recOutput","errorStatus","undefined","handleChange","bind","handleSubmit","processResults","getRecs","createPlaylist","countTracks","getRandomTrack","event","this","setState","alert","target","value","name","render","err","status","console","log","id","artist","getPlaylistTracks","then","pt","items","track","artists","output","curSongs","catch","setTimeout","handleError","promises","searchPlaylists","limit","searchTotal","a","offset","Math","floor","random","playlists","total","res","i","push","isPlaylistValid","valid","Promise","all","input","processed","key","Object","fromEntries","entries","sort","band","searchTracks","tracks","filteredByBand","filter","song","length","trackUris","keys","forEach","uri","addPromises","getMe","me","public","playlist","addTracksToPlaylist","playlistUrl","external_urls","e","preventDefault","setAccessToken","vars","token","searchArtists","Alert","className","href","Card","Body","Title","Form","onSubmit","Group","Label","Control","type","placeholder","onChange","required","Row","map","Button","onClick","Component","withRouter","connect","dispatch","change","vName","SpotifyAuth","isAuthenticatedWithSpotify","handleRedirect","access_token","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","url","encodeURIComponent","Home","Fragment","Jumbotron","Container","fluid","Col","lg","PaypalDonate","action","method","src","border","title","alt","width","height","About","xs","Image","align","md","NoMatch","Styles","styled","div","Navigation","Navbar","expand","Brand","Toggle","aria-controls","Collapse","Nav","Item","to","App","basename","process","role","exact","path","component","Boolean","hostname","match","initialState","reducer","newState","JSON","parse","stringify","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.56ece462.chunk.js","sourcesContent":["import {withRouter} from 'react-router-dom';\r\nimport React, {Component} from 'react';\r\nimport {\r\n  Card, Form, Button, Alert, Row,\r\n} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nconst spotify = new SpotifyWebApi();\r\n\r\n\r\nclass SpotifyForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {resultReceived: false, recOutput: {}, errorStatus: undefined};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.processResults = this.processResults.bind(this);\r\n    this.getRecs = this.getRecs.bind(this);\r\n    this.createPlaylist = this.createPlaylist.bind(this);\r\n    this.countTracks = this.countTracks.bind(this);\r\n    this.getRandomTrack = this.getRandomTrack.bind(this);\r\n  }\r\n\r\n  /**\r\n     * Handle change in the artist value\r\n     * @param {Object} event Event incurred by change\r\n     */\r\n  handleChange(event) {\r\n    this.setState({resultReceived: false, alert: undefined});\r\n    const {target} = event;\r\n    const {value} = target;\r\n    const {name} = target;\r\n    this.setState({[name]: value});\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n     * Handle HTTP errors encountered by updating the state with an error message\r\n     * @param {Object} err\r\n     */\r\n  async handleError(err) {\r\n    switch (err.status) {\r\n      case 401:\r\n        this.setState({errorStatus: 'You don\\'t seem to be authorized. Try clicking the button above to authorize with Spotify and try again.', resultReceived: false});\r\n        break;\r\n      case 429:\r\n        this.setState({errorStatus: 'Looks like we\\'re making too many requests to Spotify right now. Wait a little bit and try that again.'});\r\n        break;\r\n      case 501:\r\n        this.setState({errorStatus: 'Spotify\\'s servers are fried! Check out their status, then try again when they\\'re back up'});\r\n        break;\r\n      default:\r\n        console.log(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Checks whether a playlist contains is valid. Criteria for validity are:\r\n     *  - playlist attributes are well-defined (no null properties)\r\n     *  - playlist must contain the artist for which user is searching\r\n     * @param {string} id ID of playlist\r\n     * @param {*} artist Name of artist\r\n     * @return {Promise<boolean>} true if playlist is valid, false otherwise\r\n     */\r\n  async isPlaylistValid(id, artist) {\r\n    return spotify.getPlaylistTracks(id)\r\n        .then(\r\n            (pt) => {\r\n              if (pt === undefined) {\r\n                return;\r\n              }\r\n              for (const track of pt.items) {\r\n                if (track === undefined || track.track === null) {\r\n                  continue;\r\n                } else if (track.track.artists[0].name === artist) {\r\n                  return true;\r\n                }\r\n              }\r\n              return false;\r\n            },\r\n        );\r\n  }\r\n\r\n  /**\r\n     * Asynchronously counts tracks by a given artist in a given playlist\r\n     * @param {string} id ID of the playlist\r\n     * @param {string} name Name of the artist\r\n     * @param {object} output Reference to output object which should be modified\r\n     * @return {Promise}\r\n     */\r\n  async countTracks(id, name, output) {\r\n    const MAX_SONGS = 200;\r\n    return spotify.getPlaylistTracks(id).then(\r\n        (pt) => {\r\n          let curSongs = 0;\r\n          for (const track of pt.items) {\r\n            if (curSongs > MAX_SONGS) break;\r\n            if (track.track != null &&\r\n                        track.track.artists[0].name !== name &&\r\n                        track.track.artists[0].name !== '') {\r\n              if (track.track.artists[0].name in output) {\r\n                output[track.track.artists[0].name]++;\r\n              } else {\r\n                output[track.track.artists[0].name] = 1;\r\n              }\r\n            }\r\n            curSongs++;\r\n          }\r\n        },\r\n    ).catch((err) => {\r\n        if (err.status === 429) {\r\n            setTimeout(this.countTracks(id, name, output), 500);\r\n        } \r\n        this.handleError(err)\r\n    });\r\n  }\r\n\r\n  /**\r\n     * Gets recommendations for a specific artist and outputs recOutput value in state\r\n     * @param {string} name The name of the artist\r\n     * @return {Promise}\r\n     * /\r\n    * */\r\n  async getRecs(name) {\r\n    debugger;\r\n    const output = {};\r\n\r\n    const promises = [];\r\n    await spotify.searchPlaylists(name, {limit: 1})\r\n        .then(async (searchTotal) => await spotify.searchPlaylists(name, {limit: 50, offset: Math.floor(Math.random() * (searchTotal.playlists.total / 50))}).then(\r\n            (res) => {\r\n              for (const i of res.playlists.items) {\r\n                promises.push(this.isPlaylistValid(i.id, name)\r\n                    .then((valid) => (valid ? this.countTracks(i.id, name, output) : null)));\r\n              }\r\n            },\r\n        )).catch((err) => {\r\n                this.handleError(err)\r\n        });\r\n\r\n    return Promise.all(promises).then(() => this.setState({recOutput: this.processResults(output), artist: name}));\r\n  }\r\n\r\n  /**\r\n     * Processesresults from our query to spotify, removing entries beyond a certain threshhold then sorting the object.\r\n     * @return Results\r\n     */\r\n  processResults(input) {\r\n    const processed = {};\r\n    for (const key in input) {\r\n      if (input[key] > 10) {\r\n        processed[key] = input[key];\r\n      }\r\n    }\r\n    const sorted = Object.fromEntries(\r\n        Object.entries(processed).sort(([, a], [, b]) => b - a),\r\n    );\r\n    return sorted;\r\n  }\r\n\r\n\r\n  getRandomTrack(band) {\r\n    return spotify.searchTracks(band, {limit: 1})\r\n        .then((searchTotal) => spotify.searchTracks(band, {limit: 50}))\r\n        .then(\r\n            (tracks) => {\r\n              if (tracks === undefined || tracks.tracks === null) {\r\n                  return this.getRandomTrack(band);\r\n              }\r\n              // filter so we only get songs by the artist\r\n              let filteredByBand = tracks.tracks.items.filter(song =>\r\n                song.artists[0] = band\r\n              )\r\n              console.log('filtered: ');\r\n              console.log(filteredByBand);\r\n              console.log('regular: ');\r\n              console.log(tracks);\r\n              return filteredByBand[Math.floor(Math.random() * filteredByBand.length)];\r\n            },\r\n        ).catch(err => { \r\n            \r\n            if (err.status === 429) {\r\n                setTimeout(() => console.log(\"waiting to prevent 429...\"), 500)\r\n                return this.getRandomTrack(band)\r\n            } else {\r\n                this.handleError(err);\r\n            } \r\n            \r\n             \r\n        })\r\n  }\r\n\r\n  /**\r\n     * Creates playlist with one random song from each output artist\r\n     */\r\n  createPlaylist() {\r\n    debugger;\r\n    const promises = [];\r\n    const trackUris = [];\r\n\r\n    Object.keys(this.state.recOutput).forEach(async (artist) => {\r\n      promises.push(\r\n              this.getRandomTrack(artist)\r\n              .then((track) => trackUris.push(track.uri))\r\n              .catch((err) => this.handleError(err)\r\n      ));\r\n    });\r\n\r\n    // this.setState({playlistUrl: playlist.external_urls[\"spotify\"]})\r\n    Promise.all(promises).then(() => {\r\n      if (this.state.errorStatus === undefined) {\r\n        const addPromises = [];\r\n        spotify.getMe()\r\n            .then((me) => spotify.createPlaylist(me.id, {name: `Recommendations Based on  ${this.state.artist}`, public: false}))\r\n            .then((playlist) => {\r\n              trackUris.forEach(\r\n                  (uri) => addPromises.push(\r\n                      spotify.addTracksToPlaylist(playlist.id, [uri])\r\n                      .catch(err => {\r\n                        if (err.status === 429) {\r\n                            setTimeout(() => console.log(\"waiting to prevent 429...\"), 500)\r\n                            return spotify.addTracksToPlaylist(playlist.id, [uri]);\r\n                        } else {\r\n                            this.handleError(err);\r\n                        }\r\n                        \r\n                      })\r\n                      \r\n                    )\r\n              );\r\n              this.setState({playlistUrl: playlist.external_urls.spotify});\r\n            });\r\n        Promise.all(addPromises).then(() => this.setState({alert: 'Playlist created! Click below to open it up. Enjoy :)'}));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n     *  Handles submission of Artist form\r\n     * @param {Object} e Submission event\r\n     * TODO: Error handling\r\n     */\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    spotify.setAccessToken(this.props.vars.token);\r\n    this.setState({errorStatus: undefined, alert: undefined});\r\n    console.log(this.state);\r\n    spotify.searchArtists(this.state.artist)\r\n        .then(async (res) => await this.getRecs(res.artists.items[0].name))\r\n        .then(() => {\r\n        // Only show recommendations if they're non empty\r\n          if (this.state.errorStatus === undefined) {\r\n            if (Object.keys(this.state.recOutput).length === 0) {\r\n              this.setState(\r\n                  {errorStatus: 'Unfortunately, we could not find any recommendations for that artist at this time. Feel free to try another one, or try again since recommendations are randomly generated.'},\r\n              );\r\n            } else {\r\n              this.setState({resultReceived: true});\r\n            }\r\n          }\r\n        })\r\n        .catch((err) => {\r\n            if (err.status === 429) {\r\n                setTimeout(() => console.log(\"waiting to prevent 429...\"), 500)\r\n                return this.handleSubmit(e);\r\n            } \r\n            this.handleError(err)}\r\n        );\r\n  }\r\n\r\n\r\n  /**\r\n     * Render the component\r\n     * @return JSX\r\n     */\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.alert !== undefined ? (\r\n          <Alert className=\"alert-success\">\r\n            {this.state.alert}\r\n            <br />\r\n            <a href={this.state.playlistUrl}>{this.state.playlistUrl}</a>\r\n          </Alert>\r\n        ) : null }\r\n        {this.state.errorStatus !== undefined ? <Alert className=\"alert-danger\">{this.state.errorStatus}</Alert> : null }\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Enter artist's name for recommendations</Card.Title>\r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Group>\r\n                <Form.Label>Artist</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Iron Maiden\" name=\"artist\" onChange={this.handleChange} required />\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Control type=\"submit\" className=\"bg-primary text-light col-8 offset-2\" />\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Control type=\"reset\" className=\"bg-primary text-light col-8 offset-2\" />\r\n              </Form.Group>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n        <div className=\"d-block\">\r\n          {this.state.resultReceived ? (\r\n            <h4>\r\n              Recommended Artists for {this.state.artist}\r\n            </h4>\r\n          ) : null }\r\n          <Row>\r\n            <ul className=\"col-6\">\r\n              {this.state.resultReceived ? Object.keys(this.state.recOutput).map((band) => (\r\n                <li key={band}>\r\n                  {band}\r\n                  :\r\n                  {' '}\r\n                  {this.state.recOutput[band]}\r\n                </li>\r\n              )) : null }\r\n            </ul>\r\n            {this.state.resultReceived ? <Button className=\"mt-3 col-6 h-50 w-50\" onClick={this.createPlaylist}>Create a playlist with songs from these artists</Button> : null}\r\n          </Row>\r\n        </div>\r\n\r\n      </>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\n// mapping our redux state to box props\r\nconst mapStateToProps = (state) => ({\r\n  vars: state.vars,\r\n});\r\n\r\n// mapping the dispatches from our reducer to box props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  change: (vName) => dispatch({type: 'CHANGE', name: vName}),\r\n\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SpotifyForm));\r\n","import React, { Component } from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\n\r\n// I got most of this authorization method from StackOverflow. I used redux to share the token across components. \r\n\r\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\r\nclass SpotifyAuth extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isAuthenticatedWithSpotify: false\r\n    };\r\n    this.state.handleRedirect = this.handleRedirect.bind(this);\r\n  }\r\n  /**\r\n   * Runs after component mounts,  decodes the access token if applicable\r\n   */\r\n  componentDidMount() {\r\n    const hash = window.location.hash\r\n    .substring(1)\r\n    .split('&')\r\n    .reduce(function (initial, item) {\r\n      if (item) {\r\n        var parts = item.split('=');\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n      }\r\n      return initial;\r\n    }, {});\r\n\r\n    const access_token = hash.access_token;\r\n    this.props.change({'name': 'token', 'value': access_token})\r\n    \r\n    \r\n  }\r\n/**\r\n * On click of button, redirect to the spotify Implicit-Grant flow portal with our presets. Auth modes used:\r\n *  user-read-private\r\n *  playlist-modify-public\r\n *  playlist-modify-private\r\n * @param {*} event Change event for button \r\n */\r\n  handleRedirect(event) {\r\n    event.preventDefault();\r\n\r\n    let url =\r\n      'https://accounts.spotify.com/authorize' +    \r\n      '?response_type=token' +\r\n      '&client_id=3f31f6d13b974219a7093698a47d76f9' +\r\n      '&scope=' +\r\n      encodeURIComponent('user-read-private%20playlist-modify-public%20playlist-modify-private') +\r\n      '&redirect_uri=' +\r\n      encodeURIComponent('http://localhost:3000');\r\n      window.location = url;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n        <Button className=\"sp_button\" onClick={(event) => this.handleRedirect(event)} >\r\n          Link spotify to get started\r\n        </Button>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      vars:state.vars\r\n    }\r\n  };\r\n  \r\n  // mapping the dispatches from our reducer to box props \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      change: (vName) => dispatch( {type: 'CHANGE', name: vName} ),\r\n  \r\n    }\r\n  \r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SpotifyAuth);","import React from 'react'\r\nimport SpotifyForm from './components/SpotifyForm';\r\nimport SpotifyAuth from './components/SpotifyAuth';\r\n\r\n\r\nimport { Col, Row, Jumbotron, Container } from 'react-bootstrap';   \r\nexport const Home = () => {\r\n        return <React.Fragment>\r\n                <Jumbotron className=\"text-justify\">\r\n                    <Container>\r\n                        <h1 className=\"display-4\">Crowd-sourced Spotify recommendations</h1>\r\n                        <p>Unsatisfied with your spotify recommendations? I was too; that's why I made this website. This site delivers recommendations based on \r\n                            <b> playlist adjacency</b> above all. That is, I give you a set of new artists who appear in playlists with a given artist at a high frequency,\r\n                            all ranked by the number of times they are in the same playlists as the artist you entered. \r\n                        </p>\r\n                        <SpotifyAuth></SpotifyAuth>\r\n                    </Container>\r\n                </Jumbotron>\r\n            <Container fluid>\r\n                \r\n                <Row>\r\n                    <Col lg={6} className=\"offset-lg-3\">\r\n                        \r\n                        <SpotifyForm />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            </React.Fragment>\r\n}\r\n","import React from 'react';\r\n\r\n// PayPal donation form copied from their website\r\nexport const PaypalDonate = () => (\r\n    <form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\r\n        <input type=\"hidden\" name=\"cmd\" value=\"_donations\" />\r\n        <input type=\"hidden\" name=\"business\" value=\"jdrudienoy@gmail.com\" />\r\n        <input type=\"hidden\" name=\"item_name\" value=\"Donations for upkeep my website, CrowdRec\" />\r\n        <input type=\"hidden\" name=\"currency_code\" value=\"USD\" />\r\n        <input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif\" border=\"0\" name=\"submit\" title=\"PayPal - The safer, easier way to pay online!\" alt=\"Donate with PayPal button\" />\r\n        <img alt=\"\" border=\"0\" src=\"https://www.paypal.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\" />\r\n    </form>\r\n)","import React from 'react'\r\nimport { Container, Row, Col, Image} from 'react-bootstrap'\r\nimport {PaypalDonate} from './components/PaypalDonate';\r\n\r\n\r\nexport const About = () => (\r\n        <React.Fragment>\r\n            <Container>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                    <header className=\"text-center\">\r\n                        <h1 className=\"font-weight-bold text-white\">Hi, I'm JD Rudie.</h1>\r\n                    </header>\r\n                    </Col>\r\n \r\n                </Row>\r\n                <Row>\r\n                    <Col lg={12} className=\"text-justify\">\r\n                        <Image src=\"https://i.pinimg.com/originals/10/71/a6/1071a68d76b0673337b84c84d37c8100.gif\" className=\"float-left\">\r\n                        </Image>\r\n                        <p>I am a junior Mathematics and Computer Science student at Miami University in Oxford, Ohio. I intern at Wolfram Research in the Enterprise Data Analysis department.</p>\r\n                        <p>I've been enthusiastic about music my whole life. Some of my all time favorites are David Bowie, Run The Jewels, Sufjan Stevens, MF DOOM, OutKast, Parquet Courts, Deafheaven, Megadeth, and Fiona Apple. </p>\r\n                        <p>My social media is linked below just in case you're feeling like donating some clout. I also greatly appreciate PayPal donos since I'm a struggling college student.</p>\r\n                        \r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"mt-lg-5\">\r\n\r\n                        <Col lg={4} align=\"center\">\r\n                            <Image src=\"github.png\"></Image>\r\n                        </Col>\r\n                        <Col align=\"center\">\r\n                        <Image src=\"spotify.svg\" width=\"120\" height=\"120\"></Image>\r\n                        </Col>\r\n                        <Col align=\"center\">\r\n                        <Image src=\"insta.svg\" width=\"120\" height=\"120\"></Image>\r\n                        </Col>\r\n                </Row>\r\n                <Row Col md={2} className=\"offset-md-5 mt-5\">\r\n                    <PaypalDonate />\r\n                </Row>\r\n            </Container>\r\n        </React.Fragment>\r\n)  \r\n","\r\nimport React from 'react'\r\n\r\n\r\nexport const NoMatch = () => (\r\n        <div>\r\n            <h1>\r\n                We could not find that page. Instead, here's a picture of Ozzy Osbourne.\r\n            </h1>\r\n        </div>\r\n)  \r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Nav, Navbar, Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Styles = styled.div`\r\nbackground-color:green;\r\n`;\r\n\r\nexport const Navigation = () => (\r\n    <Styles>\r\n        <Navbar expand=\"lg\" className=\"navbar-dark bg-primary\">\r\n            <Container>\r\n                <Navbar.Brand href=\"/\">CrowdRec</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"navbar-nav\"></Navbar.Toggle>\r\n                <Navbar.Collapse id=\"navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Item>\r\n                            <Link to=\"/\" className=\"nav-link\">Home</Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Link to=\"/about\" className=\"nav-link\">About</Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    </Styles>\r\n)","import React, { Component } from 'react';\nimport './App.css';\nimport { Home } from './Home';\nimport { About } from './About';\nimport { NoMatch } from './Nomatch.js';\nimport { Navigation } from './components/Navigation';\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ModalFooter, Row } from 'react-bootstrap';\n\n// Main class just for rendering the components. Just a shell\nclass App extends Component {\n\trender() {\n\t\treturn (\n                <React.Fragment>\n                                <Router basename={`${process.env.PUBLIC_URL}/`}>\n                                        <Navigation />\n                                        <main role=\"main\">\n                                    \n                                                <Switch>\n                                                        <Route exact path=\"/\" component={Home} />\n                                                        <Route exact path=\"/about\" component={About} />\n                                                        <Route component={NoMatch} />\n                                                </Switch>\n                                                \n                                        </main>\n                                        <footer className=\"page-footer w-100 font-small pt-4 text-center navbar fixed-bottom\">\n                                                Copyright 2020 JD Rudie\n                                        </footer>\n                                </Router>\n                </React.Fragment>\n                \n        );\n        }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {vars: {}};\r\n\r\n\r\n// reducer for updating the dynamic variables \r\nconst reducer = (state = initialState, action) =>  {\r\n  const newState = JSON.parse(JSON.stringify(state));\r\n  if (action.type === 'CHANGE') {\r\n    newState.vars[action.name.name] = action.name.value;\r\n    console.log(newState);\r\n  }\r\n  return newState;\r\n}\r\n\r\nexport default reducer; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer'; \nimport {createStore} from 'redux';\nimport {Provider}  from'react-redux';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}> <App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}